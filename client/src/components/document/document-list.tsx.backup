import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileText, Upload, Eye, Download, Trash2, Search, Filter, Edit2, ChevronDown, Folder, Plus, FilePenLine, FileSpreadsheet, FileImage, Clock, File, ChevronLeft, ChevronRight, Library, LayoutGrid, List, ChevronsLeft, ChevronsRight, CalendarDays, FolderInput } from "lucide-react";
import { Document, Folder as FolderType } from "@shared/schema";
import { useState, useRef, useMemo } from "react";
import { useQuery, useQueryClient, useMutation } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { motion, AnimatePresence } from "framer-motion";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ConfirmDialog } from "@/components/alerts/confirm-dialog";
import { Skeleton } from "@/components/ui/skeleton";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { DocumentViewerButton } from "@/components/ui/document-viewer-button";
import { PdfViewerDialog } from "@/components/document/pdf-viewer-dialog";
import axios from "axios";
import { formatDistanceToNow, format } from "date-fns";
import { fr } from "date-fns/locale";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Dialog as CustomDialog,
  DialogContent as CustomDialogContent,
  DialogHeader as CustomDialogHeader,
  DialogTitle as CustomDialogTitle,
  DialogDescription as CustomDialogDescription,
  DialogFooter as CustomDialogFooter
} from "@/components/ui/dialog";
import { PdfUpload } from "@/components/ui/pdf-upload";
import { Checkbox } from "@/components/ui/checkbox";
import { DataPagination } from "@/components/ui/data-pagination";


const ITEMS_PER_PAGE = 12;
const FOLDERS_PER_PAGE = 10;

const documentTypeIcons = {
  'contract': <FileText />,
  'lease': <FilePenLine />,
  'invoice': <FileSpreadsheet />,
  'form': <FileText />,
  'maintenance': <FileImage />,
  'other': <File />,
};

const documentTypeLabels = {
  contract: 'Contrat',
  lease: 'Bail',
  invoice: 'Facture',
  form: 'Formulaire',
  maintenance: 'Maintenance',
  other: 'Autre',
};

interface Document2 extends Omit<Document, 'originalName'> {
  originalName: string | undefined;
  fileUrl?: string;
}

export const DocumentList = () => {
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [createFolderDialogOpen, setCreateFolderDialogOpen] = useState(false);
  const [newFolderName, setNewFolderName] = useState("");
  const [activeTab, setActiveTab] = useState("all");
  const [selectedFolderId, setSelectedFolderId] = useState<string>("all");
  const [documentType, setDocumentType] = useState("other");
  const [visibleItems, setVisibleItems] = useState(ITEMS_PER_PAGE);
  const [selectedDocument, setSelectedDocument] = useState<Document2 | null>(null);
  const [previewOpen, setPreviewOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [folderToDelete, setFolderToDelete] = useState<{ id: number, name: string } | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [advancedFilters, setAdvancedFilters] = useState({
    dateRange: "all",
    sortBy: "name",
    sortOrder: "asc"
  });
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [documentToDelete, setDocumentToDelete] = useState<Document2 | null>(null);
  const [newDocumentDialogOpen, setNewDocumentDialogOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [documentTitle, setDocumentTitle] = useState("");
  const [selectedFolder, setSelectedFolder] = useState<string>("");
  const [paginationState, setPaginationState] = useState({
    all: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE },
    contract: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE },
    lease: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE },
    invoice: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE },
    form: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE },
    maintenance: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE },
    other: { currentPage: 1, itemsPerPage: ITEMS_PER_PAGE }
  });
  const [folderSearchQuery, setFolderSearchQuery] = useState("");
  const [currentFolderPage, setCurrentFolderPage] = useState(1);
  const [deleteWithDocuments, setDeleteWithDocuments] = useState(false);

  const { data: folders = [] } = useQuery<FolderType[]>({
    queryKey: ['/api/folders'],
    retry: 3
  });

  const { data: documents = [], isLoading, error, refetch } = useQuery<Document2[]>({
    queryKey: ['/api/documents'],
    retry: 3
  });

  const createFolderMutation = useMutation({
    mutationFn: async (name: string) => {
      const response = await fetch('/api/folders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name })
      });
      if (!response.ok) throw new Error('Erreur lors de la création du dossier');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/folders'] });
      setCreateFolderDialogOpen(false);
      setNewFolderName("");
      toast({
        title: "✨ Dossier créé",
        description: "Le dossier a été créé avec succès",
        className: "bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-green-500/20",
      });
    },
    onError: () => {
      toast({
        variant: "destructive",
        title: "Erreur",
        description: "Impossible de créer le dossier"
      });
    }
  });

  const filteredDocuments = useMemo(() => {
    let filtered = documents.filter(doc => {
      const matchesFolder = selectedFolderId === "all"
        ? true
        : selectedFolderId === "none"
          ? !doc.folderId
          : doc.folderId === parseInt(selectedFolderId);

      const matchesType = activeTab === "all" || doc.type === activeTab;

      const searchLower = searchQuery.toLowerCase();
      const folderName = doc.folderId ? folders.find(f => f.id === doc.folderId)?.name.toLowerCase() : "";

      const matchesSearch = searchQuery === "" || (
        doc.title.toLowerCase().includes(searchLower) ||
        doc.type.toLowerCase().includes(searchLower) ||
        folderName?.includes(searchLower) ||
        (doc.originalName || "").toLowerCase().includes(searchLower)
      );

      let matchesDate = true;
      const docDate = new Date(doc.createdAt);
      const now = new Date();
      switch (advancedFilters.dateRange) {
        case "today":
          matchesDate = docDate.toDateString() === now.toDateString();
          break;
        case "week":
          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
          matchesDate = docDate >= weekAgo;
          break;
        case "month":
          const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
          matchesDate = docDate >= monthAgo;
          break;
      }

      return matchesFolder && matchesType && matchesSearch && matchesDate;
    });

    filtered.sort((a, b) => {
      let comparison = 0;
      switch (advancedFilters.sortBy) {
        case "name":
          comparison = a.title.localeCompare(b.title);
          break;
        case "date":
          comparison = new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
          break;
        case "type":
          comparison = a.type.localeCompare(b.type);
          break;
      }
      return advancedFilters.sortOrder === "asc" ? comparison : -comparison;
    });

    return filtered;
  }, [documents, selectedFolderId, activeTab, searchQuery, advancedFilters, folders]);

  const documentTypes = {
    contract: { label: "Contrats", color: "bg-blue-500" },
    lease: { label: "Baux", color: "bg-green-500" },
    invoice: { label: "Factures", color: "bg-purple-500" },
    form: { label: "Formulaires", color: "bg-orange-500" },
    other: { label: "Autres", color: "bg-gray-500" }
  };

  const getPaginatedDocuments = () => {
    const { currentPage, itemsPerPage } = paginationState[activeTab as keyof typeof paginationState];
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    return filteredDocuments.slice(start, end);
  };

  const handlePageChange = (page: number) => {
    setPaginationState(prev => ({
      ...prev,
      [activeTab as keyof typeof paginationState]: {
        ...prev[activeTab as keyof typeof paginationState],
        currentPage: page
      }
    }));
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleItemsPerPageChange = (value: number) => {
    setPaginationState(prev => ({
      ...prev,
      [activeTab as keyof typeof paginationState]: {
        currentPage: 1,
        itemsPerPage: value
      }
    }));
  };

  const currentDocuments = getPaginatedDocuments();
  const { currentPage, itemsPerPage } = paginationState[activeTab as keyof typeof paginationState];
  const totalPages = Math.ceil(filteredDocuments.length / itemsPerPage);

  const loadMore = () => {
    setVisibleItems(prev => prev + ITEMS_PER_PAGE);
  };

  const handleDownload = async (document: Document2) => {
    try {
      const response = await axios.get(`/api/documents/${document.id}/download`, {
        responseType: 'blob'
      });

      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = window.document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${document.title}.pdf`);
      window.document.body.appendChild(link);
      link.click();
      window.document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      toast({
        title: "✨ Téléchargement réussi",
        description: `Le document "${document.title}" a été téléchargé`,
        className: "bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-green-500/20",
      });
    } catch (error) {
      console.error('Erreur lors du téléchargement:', error);
      toast({
        variant: "destructive",
        title: "Erreur",
        description: "Impossible de télécharger le document"
      });
    }
  };

  const handleDelete = async () => {
    if (!documentToDelete) return;

    try {
      await axios.delete(`/api/documents/${documentToDelete.id}`);

      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });

      toast({
        title: "Document supprimé",
        description: `Le document "${documentToDelete.title}" a été supprimé`,
      });
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      toast({
        title: "Erreur de suppression",
        description: "Impossible de supprimer le document",
        variant: "destructive",
      });
    } finally {
      setDeleteDialogOpen(false);
      setDocumentToDelete(null);
    }
  };

  const confirmDelete = (document: Document2) => {
    setDocumentToDelete(document);
    setDeleteDialogOpen(true);
  };

  const handleFileSelected = (file: File) => {
    setSelectedFile(file);
    const filename = file.name.replace(/\.[^/.]+$/, "");
    setDocumentTitle(filename);
  };

  const handleCreateDocument = async () => {
    if (!selectedFile || !documentTitle.trim()) {
      toast({
        title: "Données manquantes",
        description: "Veuillez sélectionner un fichier et saisir un titre",
        variant: "destructive",
      });
      return;
    }

    setIsUploading(true);

    try {
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('title', documentTitle);
      formData.append('type', documentType);
      formData.append('userId', '1');
      if (selectedFolder) {
        formData.append('folderId', selectedFolder);
      }

      await axios.post('/api/documents', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });

      toast({
        title: "Document créé",
        description: `Le document "${documentTitle}" a été créé avec succès`,
      });

      setSelectedFile(null);
      setDocumentTitle("");
      setDocumentType("other");
      setSelectedFolder("");
      setNewDocumentDialogOpen(false);
    } catch (error) {
      console.error('Erreur lors de la création du document:', error);
      toast({
        title: "Erreur de création",
        description: "Impossible de créer le document. Veuillez réessayer.",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
    }
  };

  const handlePreview = async (document: Document2) => {
    try {
      const response = await fetch(`/api/documents/${document.id}`);
      if (!response.ok) {
        throw new Error('Document non trouvé');
      }

      const documentData = await response.json();
      console.log("Document data:", documentData);

      setSelectedDocument({
        ...document,
        fileUrl: `/api/documents/${document.id}/preview`
      });
      setPreviewOpen(true);

      toast({
        title: "✨ Chargement du document",
        description: "Le document est en cours d'ouverture",
        className: "bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-green-500/20",
      });
    } catch (error) {
      console.error('Error opening document:', error);
      toast({
        title: "❌ Erreur",
        description: "Impossible d'ouvrir le document",
        variant: "destructive",
      });
    }
  };

  const handleMultipleFilesUpload = async (files: File[]) => {
    for (const file of files) {
      const formData = new FormData();
      formData.append("title", file.name);
      formData.append("file", file);
      formData.append("type", documentType);
      
      if (selectedFolder && selectedFolder !== "none") {
        formData.append("folderId", selectedFolder);
      }
      
      try {
        await fetch("/api/documents", {
          method: "POST",
          body: formData,
        });
        
        queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
        if (selectedFolder && selectedFolder !== "none") {
          queryClient.invalidateQueries({ queryKey: [`/api/folders/${selectedFolder}`] });
        }
      } catch (error) {
        console.error("Erreur d'upload:", error);
        toast({
          title: "Erreur",
          description: "Une erreur est survenue lors de l'ajout d'un document.",
          variant: "destructive",
        });
      }
    }
    
    toast({
      title: "Documents ajoutés",
      description: `${files.length} documents ont été ajoutés avec succès.`,
    });
  };

  const handleFileUpload = (fileInput: File | File[]) => {
    if (Array.isArray(fileInput)) {
      handleMultipleFilesUpload(fileInput);
      return;
    }
    
    const formData = new FormData();
    formData.append("title", fileInput.name);
    formData.append("file", fileInput);
    formData.append("type", documentType);
    
    if (selectedFolder && selectedFolder !== "none") {
      formData.append("folderId", selectedFolder);
    }
    
    fetch("/api/documents", {
      method: "POST",
      body: formData,
    })
      .then((res) => res.json())
      .then(() => {
        queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
        if (selectedFolder && selectedFolder !== "none") {
          queryClient.invalidateQueries({ queryKey: [`/api/folders/${selectedFolder}`] });
        }
        toast({
          title: "Document ajouté",
          description: "Le document a été ajouté avec succès.",
        });
      })
      .catch(() => {
        toast({
          title: "Erreur",
          description: "Une erreur est survenue lors de l'ajout du document.",
          variant: "destructive",
        });
      });
  };

  const filteredFolders = useMemo(() => {
    const searchLower = folderSearchQuery.toLowerCase();
    return folders.filter(folder => !folderSearchQuery || folder.name.toLowerCase().includes(searchLower));
  }, [folders, folderSearchQuery]);

  const totalFolderPages = Math.ceil(filteredFolders.length / FOLDERS_PER_PAGE);
  const startFolderIndex = (currentFolderPage - 1) * FOLDERS_PER_PAGE;
  const endFolderIndex = startFolderIndex + FOLDERS_PER_PAGE;
  const currentFolders = filteredFolders.slice(startFolderIndex, endFolderIndex);

  const handleFolderPageChange = (page: number) => {
    setCurrentFolderPage(page);
  };

  const handleFolderDelete = async () => {
    if (!folderToDelete) return;

    try {
      if (deleteWithDocuments) {
        const documentsInFolder = documents.filter(doc => doc.folderId === folderToDelete.id);
        for (const doc of documentsInFolder) {
          await axios.delete(`/api/documents/${doc.id}`);
        }
      }

      await axios.delete(`/api/folders/${folderToDelete.id}`);

      queryClient.invalidateQueries({ queryKey: ['/api/folders'] });
      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });

      toast({
        title: "Dossier supprimé",
        description: `Le dossier "${folderToDelete.name}" a été supprimé`,
      });

      setFolderToDelete(null);
      setDeleteWithDocuments(false);
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      toast({
        title: "Erreur de suppression",
        description: "Impossible de supprimer le dossier",
        variant: "destructive",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-10 w-32" />
        </div>
        <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
          {Array.from({ length: 6 }).map((_, i) => (
            <Skeleton key={i} className="h-52" />
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center p-12 text-center">
        <div className="rounded-full bg-red-100 p-3 dark:bg-red-900/20">
          <File className="h-6 w-6 text-red-600 dark:text-red-400" />
        </div>
        <h3 className="mt-4 text-lg font-medium">Erreur de chargement</h3>
        <p className="mt-2 text-sm text-muted-foreground">
          Impossible de charger les documents. Veuillez réessayer.
        </p>
        <Button onClick={() => refetch()} className="mt-4" variant="outline">
          Réessayer
        </Button>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-8 p-6 rounded-xl bg-gradient-to-r from-background/80 to-background/40 backdrop-blur-xl border border-primary/20 shadow-lg">
        <div>
          <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-purple-500 via-violet-500 to-blue-500 bg-clip-text text-transparent animate-gradient flex items-center">
            <Library className="h-10 w-10 mr-3 text-purple-500" />
            Centre de Documents
          </h1>
          <p className="text-muted-foreground text-lg">
            Gérez et organisez tous vos documents
          </p>
        </div>
        <div className="flex gap-2">
          <Dialog open={createFolderDialogOpen} onOpenChange={setCreateFolderDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" className="gap-2 bg-gradient-to-r from-background to-muted hover:from-muted hover:to-background transition-all duration-300 border-primary/20 hover:border-primary/40">
                <Folder className="h-4 w-4" />
                Nouveau dossier
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Créer un nouveau dossier</DialogTitle>
              </DialogHeader>
              <div className="space-y-4 pt-4">
                <div className="space-y-2">
                  <Label htmlFor="folderName">Nom du dossier</Label>
                  <Input
                    id="folderName"
                    value={newFolderName}
                    onChange={(e) => setNewFolderName(e.target.value)}
                    placeholder="Mon nouveau dossier"
                  />
                </div>
                <div className="flex justify-end">
                  <Button
                    onClick={() => createFolderMutation.mutate(newFolderName)}
                    disabled={!newFolderName.trim()}
                  >
                    Créer
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>

          <CustomDialog open={newDocumentDialogOpen} onOpenChange={setNewDocumentDialogOpen}>
            <CustomDialogContent className="sm:max-w-[500px]">
              <CustomDialogHeader>
                <CustomDialogTitle>Ajouter un nouveau document</CustomDialogTitle>
                <CustomDialogDescription>
                  Chargez un document PDF et complétez les informations nécessaires
                </CustomDialogDescription>
              </CustomDialogHeader>

              <div className="space-y-4 py-4">
                <PdfUpload
                  onFileSelected={handleFileSelected}
                  label="Télécharger un PDF"
                />

                <div className="space-y-2">
                  <label htmlFor="title" className="text-sm font-medium">
                    Titre du document
                  </label>
                  <Input
                    id="title"
                    value={documentTitle}
                    onChange={(e) => setDocumentTitle(e.target.value)}
                    placeholder="Entrez un titre pour le document"
                  />
                </div>

                <div className="space-y-2">
                  <label htmlFor="type" className="text-sm font-medium">
                    Type de document
                  </label>
                  <Select
                    value={documentType}
                    onValueChange={setDocumentType}
                  >
                    <SelectTrigger id="type">
                      <SelectValue placeholder="Sélectionnez un type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="contract">Contrat</SelectItem>
                      <SelectItem value="lease">Bail</SelectItem>
                      <SelectItem value="invoice">Facture</SelectItem>
                      <SelectItem value="form">Formulaire</SelectItem>
                      <SelectItem value="maintenance">Maintenance</SelectItem>
                      <SelectItem value="other">Autre</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label htmlFor="folder" className="text-sm font-medium">
                    Dossier (optionnel)
                  </label>
                  <Select
                    value={selectedFolder}
                    onValueChange={setSelectedFolder}
                  >
                    <SelectTrigger id="folder">
                      <SelectValue placeholder="Sélectionnez un dossier" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">Aucun dossier</SelectItem>
                      {folders?.map(folder => (
                        <SelectItem key={folder.id} value={folder.id.toString()}>
                          {folder.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <CustomDialogFooter>
                <Button variant="outline" onClick={() => setNewDocumentDialogOpen(false)}>
                  Annuler
                </Button>
                <Button
                  onClick={handleCreateDocument}
                  disabled={!selectedFile || !documentTitle.trim() || isUploading}
                >
                  {isUploading ? "Création en cours..." : "Créer le document"}
                </Button>
              </CustomDialogFooter>
            </CustomDialogContent>
          </CustomDialog>

          <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>
            <DialogTrigger asChild>
              <Button className="gap-2 bg-gradient-to-r from-primary via-purple-500 to-blue-500 hover:from-primary/90 hover:via-purple-500/90 hover:to-blue-500/90 shadow-lg hover:shadow-xl transition-all duration-300 animate-gradient-x">
                <Upload className="h-4 w-4" />
                Ajouter un document
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Ajouter un nouveau document PDF</DialogTitle>
              </DialogHeader>
              <div className="space-y-4 pt-4">
                <div className="space-y-2">
                  <Label htmlFor="documentType">Type de document</Label>
                  <Select value={documentType} onValueChange={setDocumentType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Sélectionner un type" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.entries(documentTypes).map(([value, { label }]) => (
                        <SelectItem key={value} value={value}>
                          {label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid w-full max-w-sm items-center gap-1.5">
                  <Label htmlFor="file">Document PDF</Label>
                  <PdfUpload onFileSelected={handleFileUpload} />
                </div>
                <DialogFooter className="flex justify-end gap-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setUploadDialogOpen(false)}
                    disabled={isUploading}
                  >
                    Annuler
                  </Button>
                  <Button
                    type="button"
                    disabled={isUploading}
                    className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70"
                  >
                    {isUploading ? (
                      <>
                        <span className="animate-spin mr-2">⟳</span>
                        Téléchargement...
                      </>
                    ) : (
                      "Confirmer"
                    )}
                  </Button>
                </DialogFooter>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="mb-6 space-y-4 p-4 rounded-xl bg-gradient-to-r from-background/80 to-background/40 backdrop-blur-xl border border-primary/20">
        <div className="flex gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              type="text"
              placeholder="Rechercher par titre, type ou dossier..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 bg-background/50 backdrop-blur-sm border-primary/20 focus:border-primary/40 transition-all duration-300"
            />
          </div>
          <Button
            variant="outline"
            onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
            className="gap-2 bg-gradient-to-r from-background to-muted hover:from-muted hover:to-background transition-all duration-300 border-primary/20 hover:border-primary/40"
          >
            <Filter className="h-4 w-4" />
            Filtres avancés
          </Button>
        </div>

        <AnimatePresence>
          {showAdvancedFilters && (
            <motion.div
              initial={{ height: 0, opacity: 0, y: -20 }}
              animate={{ height: "auto", opacity: 1, y: 0 }}
              exit={{ height: 0, opacity: 0, y: -20 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="grid grid-cols-3 gap-4 overflow-hidden"
            >
              <Select
                value={advancedFilters.dateRange}
                onValueChange={(value) => setAdvancedFilters(prev => ({ ...prev, dateRange: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Période" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Toutes les dates</SelectItem>
                  <SelectItem value="today">Aujourd'hui</SelectItem>
                  <SelectItem value="week">Cette semaine</SelectItem>
                  <SelectItem value="month">Ce mois</SelectItem>
                </SelectContent>
              </Select>

              <Select
                value={advancedFilters.sortBy}
                onValueChange={(value) => setAdvancedFilters(prev => ({ ...prev, sortBy: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Trier par" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="name">Nom</SelectItem>
                  <SelectItem value="date">Date</SelectItem>
                  <SelectItem value="type">Type</SelectItem>
                </SelectContent>
              </Select>

              <Select
                value={advancedFilters.sortOrder}
                onValueChange={(value) => setAdvancedFilters(prev => ({ ...prev, sortOrder: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Ordre" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="asc">Croissant</SelectItem>
                  <SelectItem value="desc">Décroissant</SelectItem>
                </SelectContent>
              </Select>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      <div className="flex gap-6">
        <div className="w-64 shrink-0">
          <Card className="h-[calc(100vh-12rem)] bg-gradient-to-br from-background/60 via-background/40 to-background/20 backdrop-blur-xl border-primary/20 shadow-lg hover:shadow-xl transition-all duration-500">
            <CardHeader className="bg-gradient-to-r from-background/90 to-muted/10">
              <CardTitle className="bg-gradient-to-r from-primary via-purple-500 to-blue-500 bg-clip-text text-transparent animate-gradient">Dossiers</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="px-4 py-2">
                <div className="relative">
                  <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    type="text"
                    placeholder="Rechercher..."
                    value={folderSearchQuery}
                    onChange={(e) => setFolderSearchQuery(e.target.value)}
                    className="pl-8 bg-background/50 backdrop-blur-sm border-primary/20 focus:border-primary/40 transition-all duration-300"
                  />
                </div>
              </div>
              <ScrollArea className="h-[calc(100vh-22rem)]">
                <div className="px-4 pb-4 space-y-1">
                  <Button
                    variant="ghost"
                    className={`w-full justify-start transition-all duration-300 ${
                      selectedFolderId === "all"
                        ? "bg-gradient-to-r from-primary/20 via-purple-500/10 to-blue-500/5 text-primary"
                        : "hover:bg-gradient-to-r hover:from-primary/10 hover:to-transparent"
                    }`}
                    onClick={() => setSelectedFolderId("all")}
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    <span className="flex-1">Tous les documents</span>
                    <Badge variant="secondary" className="ml-2 bg-primary/10 backdrop-blur-sm">
                      {documents.length}
                    </Badge>
                  </Button>
                  <Button
                    variant="ghost"
                    className={`w-full justify-start transition-all duration-300 ${
                      selectedFolderId === "none"
                        ? "bg-gradient-to-r from-primary/20 via-purple-500/10 to-blue-500/5 text-primary"
                        : "hover:bg-gradient-to-r hover:from-primary/10 hover:to-transparent"
                    }`}
                    onClick={() => setSelectedFolderId("none")}
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    <span className="flex-1">Sans dossier</span>
                    <Badge variant="secondary" className="ml-2 bg-primary/10 backdrop-blur-sm">
                      {documents.filter(d => !d.folderId).length}
                    </Badge>
                  </Button>
                  {currentFolders.map(folder => {
                    const folderDocCount = documents.filter(d => d.folderId === folder.id).length;
                    return (
                      <div key={folder.id} className="flex items-center gap-2 group">
                        <Button
                          variant="ghost"
                          className={`flex-1 justify-start transition-all duration-300 ${
                            selectedFolderId === folder.id.toString()
                              ? "bg-gradient-to-r from-primary/20 via-purple-500/10 to-blue-50/5 text-primary"
                              : "hover:bg-gradient-to-r hover:from-primary/10 hover:to-transparent"
                            }`}
                          onClick={() => setSelectedFolderId(folder.id.toString())}
                        >
                          <Folder className="h-4 w-4 mr-2" />
                          <span className="flex-1">{folder.name}</span>
                          <Badge variant="secondary" className="ml-2 bg-primary/10 backdrop-blur-sm">
                            {folderDocCount}
                          </Badge>
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            window.open(`/api/folders/${folder.id}/download`, '_blank');
                            toast({
                              title: "✨ Exportation en cours",
                              description: "Le téléchargement du dossier va commencer",
                              className: "bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-green-500/20",
                            });
                          }}
                          title="Télécharger le dossier"
                          className="opacity-0 group-hover:opacity-100 transition-all duration-300 hover:bg-primary/10 hover:text-primary"
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setFolderToDelete({ id: folder.id, name: folder.name })}
                          title="Supprimer le dossier"
                          className="opacity-0 group-hover:opacity-100 transition-all duration-300 hover:bg-destructive/10 hover:text-destructive"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    );
                  })}
                </div>
                {filteredFolders.length > FOLDERS_PER_PAGE &&(
                  <div className="px-4 py-2 flex items-center justify-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleFolderPageChange(currentFolderPage - 1)}
                      disabled={currentFolderPage === 1}
                    >
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <span className="text-sm">
                      {currentFolderPage} / {totalFolderPages}
                    </span>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleFolderPageChange(currentFolderPage + 1)}
                      disabled={currentFolderPage >= totalFolderPages}
                    >
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                )}
              </ScrollArea>
            </CardContent>
          </Card>
        </div>

        <div className="flex-1">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full mb-6">
            <TabsList className="bg-gradient-to-r from-background/80 via-background/60 to-background/40 backdrop-blur-xl border border-primary/20 rounded-xl p-1 shadow-lg">
              <TabsTrigger
                value="all"
                className="rounded-lg transition-all duration-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary/20 data-[state=active]:via-purple-500/10 data-[state=active]:to-blue-500/5 data-[state=active]:text-primary"
              >
                Tous les types
                <Badge variant="secondary" className="ml2 bg-primary/10 backdrop-blur-sm">
                  {filteredDocuments.length}
                </Badge>
              </TabsTrigger>
              {Object.entries(documentTypes).map(([value, { label }]) => {
                const typeCount = filteredDocuments.filter(doc => doc.type === value).length;
                return (
                  <TabsTrigger
                    key={value}
                    value={value}
                    className="rounded-lgtransition-all duration-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary/20 data-[state=active]:via-purple-500/10 data-[state=active]:to-blue-500/5 data-[state=active]:text-primary"
                  >
                    {label}                    <Badge variant="secondary" className="ml-2 bg-primary/10 backdrop-blur-sm">
                      {typeCount}
                    </Badge>
                  </TabsTrigger>
                );
              })}
            </TabsList>
            <TabsContent value={activeTab} className="mt-6">
              <AnimatePresence>
                {filteredDocuments.length === 0 ? (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <Card className="p-12 border-dashed bg-gradient-to-br from-background/80 to-background/40 backdrop-blur-xl border-primary/20">
                      <div className="flex flex-col items-center justify-center text-center space-y-4">
                        <div className="rounded-full bg-gradient-to-br from-primary/20 to-purple-500/20 p-6">
                          <FileText className="h-12 w-12 text-primary" />
                        </div>
                        <div>
                          <h3 className="text-lg font-medium">Aucun document</h3>
                          <p className="text-muted-foreground max-w-sm mx-auto">
                            {selectedFolderId === "all"
                              ? "Commencez par ajouter un document PDF"
                              : selectedFolderId === "none"
                                ? "Aucun document sans dossier"
                                : `Aucun document dans ce dossier`}
                          </p>
                        </div>
                        <Button
                          onClick={() => setNewDocumentDialogOpen(true)}
                          className="mt-4"
                          variant="outline"
                        >
                          <Upload className="h-4 w-4 mr-2" />
                          Ajouter un document
                        </Button>
                      </div>
                    </Card>
                  </motion.div>
                ) : (
                  <Tabs defaultValue="grid">
                    <div className="flex justify-end mb-4">
                      <TabsList>
                        <TabsTrigger value="grid">Grille</TabsTrigger>
                        <TabsTrigger value="list">Liste</TabsTrigger>
                      </TabsList>
                    </div>

                    <TabsContent value="grid" className="mt-0">
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                        {currentDocuments.map((doc) => (
                          <motion.div
                            key={doc.id}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, y: -20 }}
                            transition={{
                              duration: 0.3,
                              delay: Math.random() * 0.2
                            }}
                            whileHover={{ 
                              y: -5,
                              transition: { duration: 0.2 }
                            }}
                            className="relative"
                          >
                            <Card className="group h-full flex flex-col hover:shadow-xl transition-all duration-300 border border-primary/20 hover:border-primary/40 overflow-hidden">
                              <div className="absolute top-0 left-0 w-full h-1.5 bg-gradient-to-r from-transparent via-transparent to-transparent group-hover:from-primary group-hover:via-purple-500 group-hover:to-blue-500 transition-all duration-500"></div>
                              
                              <CardHeader className="bg-gradient-to-r from-background/90 to-muted/10 pb-2">
                                <div className="flex justify-between items-start gap-2">
                                  <Badge
                                    variant="outline"
                                    className={`${documentTypes[doc.type as keyof typeof documentTypes]?.color || documentTypes.other.color} bg-opacity-20 text-xs font-medium px-2.5 py-1`}
                                  >
                                    {documentTypes[doc.type as keyof typeof documentTypes]?.label || documentTypes.other.label}
                                  </Badge>
                                  <div className="text-xs text-muted-foreground flex items-center">
                                    <Clock className="h-3 w-3 mr-1" />
                                    {doc.createdAt
                                      ? formatDistanceToNow(new Date(doc.createdAt), { addSuffix: true, locale: fr })
                                      : "Date inconnue"}
                                  </div>
                                </div>
                                <CardTitle className="truncate text-base font-medium mt-2">{doc.title}</CardTitle>
                              </CardHeader>
                              
                              <CardContent className="flex-1 space-y-4 pt-2">
                                <div className="text-sm text-muted-foreground">
                                  {doc.folderId && (
                                    <div className="flex items-center gap-2 mb-2 text-primary/80">
                                      <Folder className="h-4 w-4" />
                                      <span className="truncate">{folders.find(f => f.id === doc.folderId)?.name}</span>
                                    </div>
                                  )}
                                  <div className="flex items-center gap-1.5 text-xs">
                                    <CalendarDays className="h-3.5 w-3.5" />
                                    {new Date(doc.createdAt).toLocaleDateString('fr-FR', {
                                      day: 'numeric',
                                      month: 'long',
                                      year: 'numeric'
                                    })}
                                  </div>
                                </div>
                              </CardContent>
                              
                              <div className="absolute inset-0 bg-gradient-to-t from-background via-transparent to-transparent opacity-0 group-hover:opacity-100 flex items-end justify-center pb-4 transition-all duration-300">
                                <div className="flex justify-center gap-1">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handlePreview(doc)}
                                    className="bg-white/90 hover:bg-primary/10 hover:text-primary"
                                  >
                                    <Eye className="h-3.5 w-3.5 mr-1" />
                                    <span className="text-xs">Voir</span>
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleDownload(doc)}
                                    className="bg-white/90 hover:bg-primary/10 hover:text-primary"
                                  >
                                    <Download className="h-3.5 w-3.5 mr-1" />
                                    <span className="text-xs">Télécharger</span>
                                  </Button>
                                  
                                  {selectedFolderId !== String(doc.folderId) && (
                                    <Select
                                      onValueChange={(folderId) => {
                                        const endpoint = folderId === "none"
                                          ? `/api/documents/${doc.id}`
                                          : `/api/folders/${folderId}/documents`;

                                        fetch(endpoint, {
                                          method: folderId === "none" ? 'PATCH' : 'POST',
                                          headers: { 'Content-Type': 'application/json' },
                                          body: JSON.stringify(
                                            folderId === "none"
                                              ? { folderId: null }
                                              : { documentIds: [doc.id] }
                                          )
                                        }).then(() => {
                                          queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
                                          toast({
                                            title: "Document déplacé",
                                            description: `Le document a été ${folderId === "none" ? "retiré du dossier" : "déplacé dans le dossier"}`,
                                          });
                                        });
                                      }}
                                    >
                                      <SelectTrigger className="h-8 w-8 p-0 bg-white/90">
                                        <FolderInput className="h-3.5 w-3.5" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="none">Sans dossier</SelectItem>
                                        {folders.map(folder => (
                                          <SelectItem key={folder.id} value={folder.id.toString()}>
                                            {folder.name}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  )}
                                  
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => confirmDelete(doc)}
                                    className="bg-white/90 hover:bg-destructive/10 hover:text-destructive"
                                  >
                                    <Trash2 className="h-3.5 w-3.5" />
                                  </Button>
                                </div>
                              </div>
                            </Card>
                          </motion.div>
                        ))}
                      </div>
                      <div className="mt-6">
                        <div className="flex flex-col sm:flex-row justify-between items-center gap-4 px-2">
                          <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <span>Afficher</span>
                            <select 
                              value={itemsPerPage}
                              onChange={(e) => {
                                const newPageSize = Number(e.target.value);
                                handleItemsPerPageChange(newPageSize);
                              }}
                              className="h-8 w-16 rounded-md border border-input bg-background px-2"
                            >
                              {[5, 10, 20, 50].map(size => (
                                <option key={size} value={size}>{size}</option>
                              ))}
                            </select>
                            <span>par page | Total: {filteredDocuments.length} document{filteredDocuments.length > 1 ? 's' : ''}</span>
                          </div>
                          
                          {totalPages > 1 && (
                            <div className="flex items-center space-x-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handlePageChange(1)}
                                disabled={currentPage === 1}
                                className="h-8 w-8 p-0"
                                aria-label="Première page"
                              >
                                <span className="sr-only">Première page</span>
                                <ChevronsLeft className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handlePageChange(Math.max(1, currentPage - 1))}
                                disabled={currentPage === 1}
                                className="h-8 w-8 p-0"
                                aria-label="Page précédente"
                              >
                                <span className="sr-only">Page précédente</span>
                                <ChevronLeft className="h-4 w-4" />
                              </Button>

                              <div className="flex items-center gap-1">
                                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                  let pageNumber;
                                  
                                  if (totalPages <= 5) {
                                    pageNumber = i + 1;
                                  } else if (currentPage <= 3) {
                                    pageNumber = i + 1;
                                  } else if (currentPage >= totalPages - 2) {
                                    pageNumber = totalPages - 4 + i;
                                  } else {
                                    pageNumber = currentPage - 2 + i;
                                  }
                                  
                                  return (
                                    <Button 
                                      key={pageNumber}
                                      variant={currentPage === pageNumber ? "default" : "outline"}
                                      size="sm"
                                      onClick={() => handlePageChange(pageNumber)}
                                      className={`h-8 w-8 p-0 ${
                                        currentPage === pageNumber 
                                          ? "bg-gradient-to-r from-primary to-blue-500 hover:from-primary/90 hover:to-blue-500/90 text-white" 
                                          : ""
                                      }`}
                                    >
                                      {pageNumber}
                                    </Button>
                                  );
                                })}
                                
                                {totalPages > 5 && currentPage < totalPages - 2 && (
                                  <>
                                    <span className="px-1">...</span>
                                    <Button
                                      variant="outline"
                                      size="sm"
                                      onClick={() => handlePageChange(totalPages)}
                                      className="h-8 w-8 p-0"
                                    >
                                      {totalPages}
                                    </Button>
                                  </>
                                )}
                              </div>

                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))}
                                disabled={currentPage === totalPages}
                                className="h-8 w-8 p-0"
                                aria-label="Page suivante"
                              >
                                <span className="sr-only">Page suivante</span>
                                <ChevronRight className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handlePageChange(totalPages)}
                                disabled={currentPage === totalPages}
                                className="h-8 w-8 p-0"
                                aria-label="Dernière page"
                              >
                                <span className="sr-only">Dernière page</span>
                                <ChevronsRight className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="list" className="mt-0">
                      <Card className="overflow-hidden border border-primary/20">
                        <Table>
                          <TableHeader className="bg-gradient-to-r from-primary/5 to-blue-500/5">
                            <TableRow>
                              <TableHead className="font-medium">Nom</TableHead>
                              <TableHead className="font-medium">Type</TableHead>
                              <TableHead className="font-medium">Dossier</TableHead>
                              <TableHead className="font-medium">Date</TableHead>
                              <TableHead className="text-right font-medium">Actions</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            <AnimatePresence mode="popLayout">
                              {currentDocuments.map((document) => (
                                <motion.tr
                                  key={document.id}
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  exit={{ opacity: 0, y: -10 }}
                                  className="group hover:bg-gradient-to-r hover:from-primary/5 hover:to-transparent"
                                  transition={{ duration: 0.2 }}
                                >
                                  <TableCell className="font-medium cursor-pointer" onClick={() => handlePreview(document)}>
                                    <div className="flex items-center gap-2">
                                      {documentTypeIcons[document.type as keyof typeof documentTypeIcons] || <FileText className="h-4 w-4 text-primary/70" />}
                                      <span className="hover:text-primary transition-colors duration-200">{document.title}</span>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <Badge
                                      variant="outline"
                                      className={`${documentTypes[document.type as keyof typeof documentTypes]?.color || documentTypes.other.color} bg-opacity-20 text-xs font-medium px-2 py-0.5`}
                                    >
                                      {documentTypeLabels[document.type]}
                                    </Badge>
                                  </TableCell>
                                  <TableCell>
                                    {document.folderId ? (
                                      <div className="flex items-center gap-1.5">
                                        <Folder className="h-3.5 w-3.5 text-primary/70" />
                                        <span>{folders.find(f => f.id === document.folderId)?.name}</span>
                                      </div>
                                    ) : (
                                      <span className="text-muted-foreground text-sm italic">Aucun dossier</span>
                                    )}
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex items-center gap-1.5">
                                      <CalendarDays className="h-3.5 w-3.5 text-muted-foreground" />
                                      <span>{format(new Date(document.createdAt), 'dd/MM/yyyy', { locale: fr })}</span>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex justify-end gap-1 opacity-80 group-hover:opacity-100 transition-opacity">
                                      <Button size="icon" variant="ghost" className="h-8 w-8 hover:bg-primary/10 hover:text-primary" onClick={() => handlePreview(document)}>
                                        <Eye className="h-4 w-4" />
                                      </Button>
                                      <Button size="icon" variant="ghost" className="h-8 w-8 hover:bg-primary/10 hover:text-primary" onClick={() => handleDownload(document)}>
                                        <Download className="h-4 w-4" />
                                      </Button>
                                      
                                      {selectedFolderId !== String(document.folderId) && (
                                        <Select
                                          onValueChange={(folderId) => {
                                            const endpoint = folderId === "none"
                                              ? `/api/documents/${document.id}`
                                              : `/api/folders/${folderId}/documents`;

                                            fetch(endpoint, {
                                              method: folderId === "none" ? 'PATCH' : 'POST',
                                              headers: { 'Content-Type': 'application/json' },
                                              body: JSON.stringify(
                                                folderId === "none"
                                                  ? { folderId: null }
                                                  : { documentIds: [document.id] }
                                              )
                                            }).then(() => {
                                              queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
                                              toast({
                                                title: "Document déplacé",
                                                description: `Le document a été ${folderId === "none" ? "retiré du dossier" : "déplacé dans le dossier"}`,
                                              });
                                            });
                                          }}
                                        >
                                          <SelectTrigger className="h-8 w-8 p-0">
                                            <FolderInput className="h-4 w-4" />
                                          </SelectTrigger>
                                          <SelectContent>
                                            <SelectItem value="none">Sans dossier</SelectItem>
                                            {folders.map(folder => (
                                              <SelectItem key={folder.id} value={folder.id.toString()}>
                                                {folder.name}
                                              </SelectItem>
                                            ))}
                                          </SelectContent>
                                        </Select>
                                      )}
                                      
                                      <Button size="icon" variant="ghost" className="h-8 w-8 hover:bg-destructive/10 hover:text-destructive" onClick={() => confirmDelete(document)}>
                                        <Trash2 className="h-4 w-4" />
                                      </Button>
                                    </div>
                                  </TableCell>
                                </motion.tr>
                              ))}
                            </AnimatePresence>
                          </TableBody>
                        </Table>

                        {filteredDocuments.length > itemsPerPage && (
                          <div className="p-4 border-t">
                            <div className="flex flex-col sm:flex-row justify-between items-center gap-4 px-2">
                              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                <span>Afficher</span>
                                <select 
                                  value={itemsPerPage}
                                  onChange={(e) => {
                                    const newPageSize = Number(e.target.value);
                                    handleItemsPerPageChange(newPageSize);
                                  }}
                                  className="h-8 w-16 rounded-md border border-input bg-background px-2"
                                >
                                  {[5, 10, 20, 50].map(size => (
                                    <option key={size} value={size}>{size}</option>
                                  ))}
                                </select>
                                <span>par page | Total: {filteredDocuments.length} document{filteredDocuments.length > 1 ? 's' : ''}</span>
                              </div>
                              
                              <div className="flex items-center space-x-2">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handlePageChange(1)}
                                  disabled={currentPage === 1}
                                  className="h-8 w-8 p-0"
                                  aria-label="Première page"
                                >
                                  <span className="sr-only">Première page</span>
                                  <ChevronsLeft className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handlePageChange(currentPage - 1)}
                                  disabled={currentPage === 1}
                                  className="h-8 w-8 p-0"
                                  aria-label="Page précédente"
                                >
                                  <span className="sr-only">Page précédente</span>
                                  <ChevronLeft className="h-4 w-4" />
                                </Button>
                                
                                <div className="flex items-center gap-1">
                                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                    let pageNumber;
                                    // Afficher 5 pages maximum avec la page actuelle au milieu si possible
                                    if (totalPages <= 5) {
                                      pageNumber = i + 1;
                                    } else if (currentPage <= 3) {
                                      pageNumber = i + 1;
                                    } else if (currentPage >= totalPages - 2) {
                                      pageNumber = totalPages - 4 + i;
                                    } else {
                                      pageNumber = currentPage - 2 + i;
                                    }
                                    
                                    return (
                                      <Button 
                                        key={pageNumber}
                                        variant={currentPage === pageNumber ? "default" : "outline"}
                                        size="sm"
                                        onClick={() => handlePageChange(pageNumber)}
                                        className={`h-8 w-8 p-0 ${
                                          currentPage === pageNumber 
                                            ? "bg-gradient-to-r from-primary to-blue-500 hover:from-primary/90 hover:to-blue-500/90 text-white" 
                                            : ""
                                        }`}
                                      >
                                        {pageNumber}
                                      </Button>
                                    );
                                  })}
                                  
                                  {totalPages > 5 && currentPage < totalPages - 2 && (
                                    <>
                                      <span className="px-1">...</span>
                                      <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => handlePageChange(totalPages)}
                                        className="h-8 w-8 p-0"
                                      >
                                        {totalPages}
                                      </Button>
                                    </>
                                  )}
                                </div>
                                
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handlePageChange(currentPage + 1)}
                                  disabled={currentPage === totalPages}
                                  className="h-8 w-8 p-0"
                                  aria-label="Page suivante"
                                >
                                  <span className="sr-only">Page suivante</span>
                                  <ChevronRight className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handlePageChange(totalPages)}
                                  disabled={currentPage === totalPages}
                                  className="h-8 w-8 p-0"
                                  aria-label="Dernière page"
                                >
                                  <span className="sr-only">Dernière page</span>
                                  <ChevronsRight className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          </div>
                        )}
                      </Card>
                    </TabsContent>
                  </Tabs>
                )}
              </AnimatePresence>
            </TabsContent>
          </Tabs>
        </div>
      </div>
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Êtes-vous sûr ?</AlertDialogTitle>
            <AlertDialogDescription>
              Cette action ne peut pas être annulée. Le document "{documentToDelete?.title}" sera définitivement supprimé.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Annuler</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              className="bg-red-500 hover:bg-red-600"
            >
              Supprimer
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <AlertDialog open={!!folderToDelete} onOpenChange={() => setFolderToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Êtes-vous sûr de vouloir supprimer ce dossier ?</AlertDialogTitle>
            <AlertDialogDescription>
              Cette action ne peut pas être annulée.
              <div className="mt-4 flex items-center space-x-2">
                <Checkbox
                  id="deleteDocuments"
                  checked={deleteWithDocuments}
                  onCheckedChange={(checked) => setDeleteWithDocuments(checked as boolean)}
                />
                <label
                  htmlFor="deleteDocuments"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  Supprimer également les documents contenus dans le dossier
                </label>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Annuler</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleFolderDelete}
              className="bg-red-500 hover:bg-red-600"
            >
              Supprimer
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      {selectedDocument && (
        <PdfViewerDialog
          fileUrl={selectedDocument.fileUrl || ''}
          isOpen={previewOpen}
          onClose={() => {
            setPreviewOpen(false);
            setSelectedDocument(null);
          }}
        />
      )}
    </div>
  );
};

export default DocumentList;