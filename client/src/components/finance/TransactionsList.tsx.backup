import { useState, useRef, useMemo, Fragment, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { motion, AnimatePresence } from "framer-motion";
import { DateRange, SelectMultipleEventHandler, DayClickEventHandler } from "react-day-picker";
import { type Transaction as TransactionType } from "@shared/schema";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Search, Filter, SlidersHorizontal, ChevronDown, Home, Eye, Trash2, 
  FileText, Plus, Edit, RefreshCw, XCircle, Calendar, ArrowUpCircle, 
  ArrowDownCircle, CreditCard, Tag, Euro, Clock, Building2, CreditCardIcon,
  Loader2, X, Folder, PlusCircle, Receipt, Wallet, PiggyBank, ArrowUpDown,
  DollarSign, ChevronUp, Download, FileSpreadsheet, Layers
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { PdfUpload } from "@/components/ui/pdf-upload";
import { DocumentViewerButton } from "@/components/ui/document-viewer-button";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { TransactionFilters } from "@/pages/finance";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";
import { DataPagination } from "@/components/ui/data-pagination";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";
import { ExportMenu } from "@/components/data-export/ExportMenu";
import { Combobox } from "@/components/ui/combobox";
import { apiRequest } from "@/lib/queryClient";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DatePicker } from "@/components/ui/date-picker";
import { useVirtualizer } from '@tanstack/react-virtual';
import * as XLSX from 'xlsx';
import { LucideIcon } from 'lucide-react';
import { MultiSelect } from "@/components/ui/multi-select";
import { Calendar as CalendarPicker } from "@/components/ui/calendar";
import { Calendar as CalendarIcon } from "lucide-react";

const typeColors = {
  income: "bg-emerald-500/10 text-emerald-600 dark:text-emerald-400",
  expense: "bg-rose-500/10 text-rose-600 dark:text-rose-400",
  credit: "bg-amber-500/10 text-amber-600 dark:text-amber-400",
} as const;

type TransactionStatus = 'pending' | 'completed' | 'cancelled' | 'failed' | 'archived' | 'deleted';
type TransactionCategory = keyof typeof categoryLabels;

const statusLabels = {
  pending: "En attente",
  completed: "Complété",
  cancelled: "Annulé",
  failed: "Échoué",
  archived: "Archivé",
  deleted: "Supprimé"
} as const;

const statusColors: Record<TransactionStatus, string> = {
  pending: "bg-yellow-500/10 text-yellow-600 dark:text-yellow-400",
  completed: "bg-emerald-500/10 text-emerald-600 dark:text-emerald-400",
  cancelled: "bg-gray-500/10 text-gray-600 dark:text-gray-400",
  failed: "bg-red-500/10 text-red-600 dark:text-red-400",
  archived: "bg-gray-500/10 text-gray-600 dark:text-gray-400",
  deleted: "bg-gray-500/10 text-gray-600 dark:text-gray-400",
} as const;

const paymentMethodLabels = {
  cash: "Espèces",
  bank_transfer: "Virement bancaire",
  stripe: "Stripe",
  paypal: "PayPal",
  sepa: "SEPA",
  card: "Carte bancaire",
  check: "Chèque",
} as const;

const categoryLabels = {
  rent: "Loyer",
  maintenance: "Maintenance",
  insurance: "Assurance",
  tax: "Taxe",
  utility: "Charges",
  other: "Autre",
} as const;

import { FormattedTransaction } from '@/types';

interface TransactionsListProps {
  showNewTransactionDialog: boolean;
  setShowNewTransactionDialog: (show: boolean) => void;
  transactions: FormattedTransaction[];
  activeTab: "pending" | "completed" | "cancelled" | "all";
  filters: TransactionFilters;
  setFilters: React.Dispatch<React.SetStateAction<TransactionFilters>>;
}

const ITEMS_PER_PAGE = 10;

interface GroupedTransaction {
  propertyId: number | null;
  propertyName: string;
  type: 'income' | 'expense' | 'credit';
  category: keyof typeof categoryLabels;
  totalAmount: number;
  transactionCount: number;
  transactions: FormattedTransaction[];
  isExpanded: boolean;
}

const transactionIcons: Record<keyof typeof categoryLabels, LucideIcon> = {
  rent: Building2,
  maintenance: Receipt,
  insurance: PiggyBank,
  tax: Wallet,
  utility: Receipt,
  other: DollarSign
};

interface SortConfig {
  key: 'date' | 'amount' | 'description';
  direction: 'asc' | 'desc';
}

interface AdvancedFilters {
  dateRange: { start: Date | null; end: Date | null };
  amountRange: { min: number | null; max: number | null };
  categories: string[];
  paymentMethods: string[];
  status: string[];
  grouping: 'property-type-category' | 'property-category' | 'type-category' | 'category' | 'property-type' | 'property' | 'type' | 'month' | 'month-category' | 'month-type' | 'month-property' | 'none';
  sortByDate: 'asc' | 'desc' | null;
  sortByPeriod: 'day' | 'week' | 'month' | 'year' | null;
  selectedDates: Date[];
}

// Créer un type d'utilitaire pour gérer les valeurs undefined
type SafeAdvancedFilters = Omit<AdvancedFilters, 'selectedDates'> & {
  selectedDates: (Date | undefined)[];
};

const filterTransactions = (transactions: FormattedTransaction[], filters: TransactionFilters): FormattedTransaction[] => {
  return transactions.filter(transaction => {
    // Filtre par date
    if (filters.dateRange?.from && filters.dateRange?.to) {
      const transactionDate = new Date(transaction.date);
      const startDate = new Date(filters.dateRange.from);
      const endDate = new Date(filters.dateRange.to);
      
      // Convertir les dates au début et à la fin de la journée pour une comparaison plus précise
      startDate.setHours(0, 0, 0, 0);
      endDate.setHours(23, 59, 59, 999);
      
      // Vérifier si la date de la transaction est dans la plage
      if (transactionDate < startDate || transactionDate > endDate) {
        return false;
      }
    }

    if (filters.type !== 'all' && transaction.type !== filters.type) {
      return false;
    }

    if (filters.category !== 'all' && transaction.category !== filters.category) {
      return false;
    }

    if (filters.property !== 'all' && transaction.propertyName !== filters.property) {
      return false;
    }

    if (filters.paymentMethod !== 'all' && transaction.paymentMethod !== filters.paymentMethod) {
      return false;
    }

    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      return (
        transaction.description?.toLowerCase().includes(searchLower) ||
        transaction.propertyName?.toLowerCase().includes(searchLower) ||
        transaction.tenantName?.toLowerCase().includes(searchLower) ||
        transaction.formattedAmount.toLowerCase().includes(searchLower)
      );
    }

    return true;
  });
};

const sortTransactions = (transactions: FormattedTransaction[], sortConfig: SortConfig): FormattedTransaction[] => {
  return [...transactions].sort((a, b) => {
    if (sortConfig.key === 'date') {
      const dateA = new Date(a.date).getTime();
      const dateB = new Date(b.date).getTime();
      return sortConfig.direction === 'asc' ? dateA - dateB : dateB - dateA;
    }
    if (sortConfig.key === 'amount') {
      const amountA = Number(a.amount);
      const amountB = Number(b.amount);
      return sortConfig.direction === 'asc' ? amountA - amountB : amountB - amountA;
    }
    if (sortConfig.key === 'description') {
      const descA = a.description || '';
      const descB = b.description || '';
      return sortConfig.direction === 'asc' 
        ? descA.localeCompare(descB)
        : descB.localeCompare(descA);
    }
    return 0;
  });
};

const groupTransactions = (transactions: FormattedTransaction[], filters: TransactionFilters, advancedFilters: AdvancedFilters): GroupedTransaction[] => {
  // Utilisons un cache pour garder les résultats précédents des opérations coûteuses
  const memoizedDateMap = new Map<number, { 
    date: Date, 
    monthKey: string, 
    yearKey: string, 
    dayKey: string, 
    weekKey: string 
  }>();
  
  // Filtrons les transactions une seule fois
  let filteredTransactions = filterTransactions(transactions, filters);
  
  // Prétraitement des dates pour toutes les transactions en une seule passe
  filteredTransactions.forEach(transaction => {
    if (!memoizedDateMap.has(transaction.id)) {
      const date = new Date(transaction.date);
      // Utilisons des valeurs précalculées pour les opérations fréquentes
      memoizedDateMap.set(transaction.id, {
        date,
        monthKey: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,
        yearKey: `${date.getFullYear()}`,
        dayKey: date.toISOString().split('T')[0],
        weekKey: `${date.getFullYear()}-${String(Math.floor(date.getDate() / 7))}`
      });
    }
  });
  
  // Optimisations pour les tris et filtres en utilisant le cache
  if (advancedFilters.sortByDate) {
    // Tri optimisé par date
    filteredTransactions.sort((a, b) => {
      const dateA = memoizedDateMap.get(a.id)?.date.getTime() || 0;
      const dateB = memoizedDateMap.get(b.id)?.date.getTime() || 0;
      return advancedFilters.sortByDate === 'asc' ? dateA - dateB : dateB - dateA;
    });
  }
  
  if (advancedFilters.sortByPeriod) {
    // Tri optimisé par période
    filteredTransactions.sort((a, b) => {
      let periodA = '';
      let periodB = '';
      
      const aInfo = memoizedDateMap.get(a.id);
      const bInfo = memoizedDateMap.get(b.id);
      
      if (!aInfo || !bInfo) return 0;
      
      switch (advancedFilters.sortByPeriod) {
        case 'day': 
          periodA = aInfo.dayKey;
          periodB = bInfo.dayKey;
          break;
        case 'week':
          periodA = aInfo.weekKey;
          periodB = bInfo.weekKey;
          break;
        case 'month':
          periodA = aInfo.monthKey;
          periodB = bInfo.monthKey;
          break;
        case 'year':
          periodA = aInfo.yearKey;
          periodB = bInfo.yearKey;
          break;
      }
      
      return periodA.localeCompare(periodB);
    });
  }
  
  // Optimisation: précalculer les dates sélectionnées pour le filtrage
  if (advancedFilters.selectedDates.length > 0) {
    const selectedDateStrings = new Set(
      advancedFilters.selectedDates
        .map(date => date.toISOString().split('T')[0])
    );
    
    filteredTransactions = filteredTransactions.filter(transaction => {
      const dayKey = memoizedDateMap.get(transaction.id)?.dayKey;
      return dayKey && selectedDateStrings.has(dayKey);
    });
  }
  
  // Cas simple - pas de regroupement
  // Utiliser une assertion de type pour éviter l'erreur de linter
  const groupingType = advancedFilters.grouping as string;
  if (groupingType === 'none') {
    return filteredTransactions.map(transaction => ({
      propertyId: transaction.propertyId,
      propertyName: transaction.propertyName,
      type: transaction.type,
      category: transaction.category as keyof typeof categoryLabels,
      totalAmount: Number(transaction.amount),
      transactionCount: 1,
      transactions: [transaction],
      isExpanded: false
    }));
  }
  
  // Groupement optimisé
  const grouped: Record<string, GroupedTransaction> = {};
  
  // Boucle optimisée - une seule passe par transaction
  for (const transaction of filteredTransactions) {
    // Calculer la clé de regroupement une seule fois par transaction
    let key = '';
    const dateInfo = memoizedDateMap.get(transaction.id);
    const monthKey = dateInfo?.monthKey || '';
    
    // Utiliser une assertion de type pour éviter les erreurs de linter
    const groupingType = advancedFilters.grouping as string;
    
    // Créer des clés différentes selon le type de regroupement
    if (groupingType === 'property-type-category') {
      key = `${transaction.propertyId}-${transaction.type}-${transaction.category}`;
    } else if (groupingType === 'property-category') {
      key = `${transaction.propertyId}-${transaction.category}`;
    } else if (groupingType === 'type-category') {
      key = `${transaction.type}-${transaction.category}`;
    } else if (groupingType === 'category') {
      key = transaction.category;
    } else if (groupingType === 'property-type') {
      key = `${transaction.propertyId}-${transaction.type}`;
    } else if (groupingType === 'property') {
      key = `${transaction.propertyId}`;
    } else if (groupingType === 'type') {
      key = transaction.type;
    } else if (groupingType === 'month') {
      key = monthKey;
    } else if (groupingType === 'month-category') {
      key = `${monthKey}-${transaction.category}`;
    } else if (groupingType === 'month-type') {
      key = `${monthKey}-${transaction.type}`;
    } else if (groupingType === 'month-property') {
      key = `${monthKey}-${transaction.propertyId}`;
    } else if (groupingType === 'none') {
      // Pour "aucun regroupement", on utilise l'ID de transaction comme clé
      key = `transaction-${transaction.id}`;
    } else {
      // Cas par défaut, ne devrait jamais arriver
      key = `${transaction.id}`;
    }
    
    // Créer ou mettre à jour le groupe
    if (!grouped[key]) {
      grouped[key] = {
        propertyId: transaction.propertyId,
        propertyName: transaction.propertyName,
        type: transaction.type,
        category: transaction.category as keyof typeof categoryLabels,
        totalAmount: 0,
        transactionCount: 0,
        transactions: [],
        isExpanded: false
      };
    }
    
    // Mise à jour des agrégations
    grouped[key].totalAmount += Number(transaction.amount);
    grouped[key].transactionCount++;
    grouped[key].transactions.push(transaction);
  }
  
  // Finalisation
  const groups = Object.values(grouped);
  
  // Optimisation: trier toutes les transactions une seule fois
  for (const group of groups) {
    group.transactions.sort((a, b) => {
      const dateA = memoizedDateMap.get(a.id)?.date.getTime() || 0;
      const dateB = memoizedDateMap.get(b.id)?.date.getTime() || 0;
      return dateB - dateA; // tri par date décroissante
    });
  }

  // Assurons-nous de toujours retourner un tableau de GroupedTransaction
  return groups;
};

const exportToExcel = (transactions: FormattedTransaction[]) => {
  const worksheet = XLSX.utils.json_to_sheet(transactions.map(t => ({
    Date: format(new Date(t.date), 'dd/MM/yyyy'),
    Description: t.description,
    Catégorie: categoryLabels[t.category as TransactionCategory],
    Type: t.type === 'income' ? 'Revenu' : t.type === 'expense' ? 'Dépense' : 'Crédit',
    Montant: t.formattedAmount,
    Propriété: t.propertyName,
    Locataire: t.tenantName,
    Statut: t.status,
    'Méthode de paiement': paymentMethodLabels[t.paymentMethod as keyof typeof paymentMethodLabels]
  })));

  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Transactions');
  XLSX.writeFile(workbook, `transactions_${format(new Date(), 'dd-MM-yyyy')}.xlsx`);
};

const exportGroupToCSV = (group: GroupedTransaction) => {
  const csvContent = [
    ['Date', 'Description', 'Catégorie', 'Type', 'Montant', 'Propriété', 'Statut', 'Méthode de paiement'],
    ...group.transactions.map(t => [
      format(new Date(t.date), 'dd/MM/yyyy'),
      t.description || '',
      categoryLabels[t.category as TransactionCategory],
      t.type === 'income' ? 'Revenu' : t.type === 'expense' ? 'Dépense' : 'Crédit',
      t.formattedAmount,
      t.propertyName || '',
      t.status,
      paymentMethodLabels[t.paymentMethod as keyof typeof paymentMethodLabels] || ''
    ])
  ];

  const csvString = csvContent.map(row => row.join(',')).join('\n');
  const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.setAttribute('href', url);
  link.setAttribute('download', `transactions_${group.propertyName}_${format(new Date(), 'dd-MM-yyyy')}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export function TransactionsList({
  transactions = [],
  showNewTransactionDialog,
  setShowNewTransactionDialog,
  activeTab,
  filters,
  setFilters,
}: TransactionsListProps) {
  const [completedPage, setCompletedPage] = useState(1);
  const [pendingPage, setPendingPage] = useState(1);
  const [cancelledPage, setCancelledPage] = useState(1);
  const pageSize = ITEMS_PER_PAGE;
  const [showPreview, setShowPreview] = useState(false);
  const [selectedDocumentId, setSelectedDocumentId] = useState<number | null>(null);
  const [selectedDocumentIds, setSelectedDocumentIds] = useState<number[]>([]);
  const [currentDocumentIndex, setCurrentDocumentIndex] = useState(0);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<FormattedTransaction | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [documentToDelete, setDocumentToDelete] = useState<number | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [selectedFolderId, setSelectedFolderId] = useState<number | null>(null);
  const [isCreatingFolder, setIsCreatingFolder] = useState(false);
  const [newFolderName, setNewFolderName] = useState("");
  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set());
  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'date', direction: 'desc' });
  const [advancedFilters, setAdvancedFilters] = useState<AdvancedFilters>({
    dateRange: { start: null, end: null },
    amountRange: { min: null, max: null },
    categories: [],
    paymentMethods: [],
    status: [],
    grouping: 'property-type-category',
    sortByDate: 'desc',
    sortByPeriod: null,
    selectedDates: []
  });
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [animatingAction, setAnimatingAction] = useState<'cancel' | 'archive' | 'delete' | null>(null);
  const [animationComplete, setAnimationComplete] = useState(false);
  const [transactionsToEdit, setTransactionsToEdit] = useState<FormattedTransaction[]>([]);
  const [showBulkEditDialog, setShowBulkEditDialog] = useState(false);
  const [selectedTransactionIds, setSelectedTransactionIds] = useState<Set<number>>(new Set());
  const [newCategory, setNewCategory] = useState<string>("");
  const [newStatus, setNewStatus] = useState<string>("");
  const [newPaymentMethod, setNewPaymentMethod] = useState<string>("");
  const [key, setKey] = useState(0);
  const hasCleanedUp = useRef(false);
  const [displayedTransactionsCount, setDisplayedTransactionsCount] = useState(20);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const loadMoreRef = useRef<HTMLDivElement>(null);
  const [showScrollTop, setShowScrollTop] = useState(false);

  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const { data: folders = [] } = useQuery<any[]>({
    queryKey: ["/api/folders"],
  });
  
  const createFolderMutation = useMutation({
    mutationFn: async (folderName: string) => {
      return apiRequest('/api/folders', {
        method: 'POST',
        body: JSON.stringify({ name: folderName, path: "", section: "finance" }),
      });
    },
    onSuccess: (data) => {
      setSelectedFolderId(data.id);
      setIsCreatingFolder(false);
      setNewFolderName("");
      queryClient.invalidateQueries({ queryKey: ["/api/folders"] });
      toast({ title: "Succès", description: "Dossier créé avec succès" });
    },
    onError: (error: any) => {
      toast({ 
        title: "Erreur", 
        description: error.message || "Impossible de créer le dossier", 
        variant: "destructive" 
      });
    },
  });

  const handleStatusChange = async (transactionId: number, newStatus: string) => {
    try {
      const response = await fetch(`/api/transactions/${transactionId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) throw new Error('Erreur lors du changement de statut');

      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });
      toast({
        title: 'Succès',
        description: 'Le statut a été mis à jour',
      });
    } catch (error) {
      toast({
        title: 'Erreur',
        description: 'Impossible de mettre à jour le statut',
        variant: 'destructive',
      });
    }
  };

  const handleDelete = async (transactionId: number) => {
    if (!confirm('Êtes-vous sûr de vouloir supprimer définitivement cette transaction ?')) {
      return;
    }

    try {
      const response = await fetch(`/api/transactions/${transactionId}`, {
        method: 'DELETE',
      });

      if (!response.ok) throw new Error('Erreur lors de la suppression');

      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });
      toast({
        title: 'Succès',
        description: 'La transaction a été supprimée',
      });
    } catch (error) {
      toast({
        title: 'Erreur',
        description: 'Impossible de supprimer la transaction',
        variant: 'destructive',
      });
    }
  };
  
  const handleEditTransaction = (transaction: FormattedTransaction) => {
    setSelectedTransaction(transaction);
    setShowEditDialog(true);
  };

  // Mémoiser les transactions filtrées par statut
  const completedTransactions = useMemo(() => 
    transactions.filter(t => t.status === 'completed'),
    [transactions]
  );
  
  const pendingTransactions = useMemo(() => 
    transactions.filter(t => t.status === 'pending'),
    [transactions]
  );
  
  const cancelledTransactions = useMemo(() => 
    transactions.filter(t => t.status === 'cancelled'),
    [transactions]
  );

  // Mémoiser les résultats des groupements
  const groupedCompletedTransactions = useMemo(() => 
    groupTransactions(completedTransactions, filters, advancedFilters),
    [completedTransactions, filters, advancedFilters]
  );
  
  const groupedPendingTransactions = useMemo(() => 
    groupTransactions(pendingTransactions, filters, advancedFilters),
    [pendingTransactions, filters, advancedFilters]
  );
  
  const groupedCancelledTransactions = useMemo(() => 
    groupTransactions(cancelledTransactions, filters, advancedFilters),
    [cancelledTransactions, filters, advancedFilters]
  );
  
  const allGroupedTransactions = useMemo(() => 
    [...groupedCompletedTransactions, ...groupedPendingTransactions, ...groupedCancelledTransactions],
    [groupedCompletedTransactions, groupedPendingTransactions, groupedCancelledTransactions]
  );

  const paginateTransactions = (transactions: FormattedTransaction[], type: 'completed' | 'pending' | 'cancelled') => {
    let currentPageToUse = 1;
    
    if (type === 'completed') {
      currentPageToUse = completedPage;
    } else if (type === 'pending') {
      currentPageToUse = pendingPage;
    } else if (type === 'cancelled') {
      currentPageToUse = cancelledPage;
    }
    
    const start = (currentPageToUse - 1) * pageSize;
    const end = start + pageSize;
    return transactions.slice(start, end);
  };

  const TransactionTable = ({
    title,
    description,
    transactions: tableTransactions,
    type,
  }: {
    title: string;
    description: string;
    transactions: FormattedTransaction[];
    type: "income" | "expense" | "credit";
  }) => {
    const filteredTransactions = tableTransactions.filter(transaction => {
      // Filtres avancés
      if (filters.dateRange?.from && filters.dateRange?.to) {
        const transactionDate = new Date(transaction.date);
        const startDate = new Date(filters.dateRange.from);
        startDate.setHours(0, 0, 0, 0);
        const endDate = new Date(filters.dateRange.to);
        endDate.setHours(23, 59, 59, 999);
        
        if (transactionDate < startDate || transactionDate > endDate) {
          return false;
        }
      }

      // Filtre par montant
      const amount = Number(transaction.amount);
      if (advancedFilters.amountRange.min !== null && amount < advancedFilters.amountRange.min) {
        return false;
      }
      if (advancedFilters.amountRange.max !== null && amount > advancedFilters.amountRange.max) {
        return false;
      }

      // Filtre par catégorie avancé
      if (advancedFilters.categories.length > 0 && 
          !advancedFilters.categories.includes(transaction.category)) {
        return false;
      }

      // Filtre par méthode de paiement avancé
      if (advancedFilters.paymentMethods.length > 0 && 
          transaction.paymentMethod &&
          !advancedFilters.paymentMethods.includes(transaction.paymentMethod)) {
        return false;
      }

      // Filtre par statut avancé
      if (advancedFilters.status.length > 0 && 
          !advancedFilters.status.includes(transaction.status)) {
        return false;
      }

      // Recherche texte avancée
      if (searchQuery) {
        const searchLower = searchQuery.toLowerCase();
        if (!(
          transaction.description?.toLowerCase().includes(searchLower) ||
          transaction.propertyName?.toLowerCase().includes(searchLower) ||
          transaction.tenantName?.toLowerCase().includes(searchLower) ||
          transaction.formattedAmount.toLowerCase().includes(searchLower)
        )) {
          return false;
        }
      }

      return true;
    });
    
    const groupedTransactions = groupTransactions(filteredTransactions, filters, advancedFilters);

    // Fonction pour générer une clé unique pour chaque groupe en fonction du mode de regroupement
    const generateGroupKey = (group: GroupedTransaction): string => {
      // Si le groupe n'a pas de transactions, utiliser une clé générique
      if (group.transactions.length === 0) {
        return `empty-group-${Math.random().toString(36).substring(2, 9)}`;
      }

      // Extraire les informations de la première transaction pour les regroupements basés sur le mois
      const firstTransaction = group.transactions[0];
      const date = new Date(firstTransaction.date);
      const monthString = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;

      // Assertion de type pour éviter les erreurs avec "none"
      const groupingType = advancedFilters.grouping as string;

      // Créer des clés spécifiques en fonction du mode de regroupement
      switch (groupingType) {
        case 'month':
          return `month-${monthString}`;
        case 'month-category':
          return `month-${monthString}-category-${group.category}`;
        case 'month-type':
          return `month-${monthString}-type-${group.type}`;
        case 'month-property':
          return `month-${monthString}-property-${group.propertyId || 'none'}`;
        case 'property-type-category':
          return `property-${group.propertyId || 'none'}-type-${group.type}-category-${group.category}`;
        case 'property-category':
          return `property-${group.propertyId || 'none'}-category-${group.category}`;
        case 'type-category':
          return `type-${group.type}-category-${group.category}`;
        case 'category':
          return `category-${group.category}`;
        case 'property-type':
          return `property-${group.propertyId || 'none'}-type-${group.type}`;
        case 'property':
          return `property-${group.propertyId || 'none'}`;
        case 'type':
          return `type-${group.type}`;
        case 'none':
          // Pour "aucun regroupement", utiliser l'ID de la transaction directement
          return `single-transaction-${firstTransaction.id}`;
        default:
          // Clé générique au cas où
          return `group-${group.propertyId || 'none'}-${group.type}-${group.category}`;
      }
    };

    // Modifier toggleGroup pour qu'elle n'ouvre que le groupe spécifique
    const toggleGroup = (key: string) => {
      setExpandedGroups(prev => {
        const newSet = new Set(prev);
        if (newSet.has(key)) {
          newSet.delete(key);
        } else {
          newSet.add(key);
        }
        return newSet;
      });
    };

    // Ajouter l'observateur d'intersection
    useEffect(() => {
      const observer = new IntersectionObserver(
        (entries) => {
          const first = entries[0];
          if (first.isIntersecting && !isLoadingMore && groupedTransactions.length > displayedTransactionsCount) {
            setIsLoadingMore(true);
            // Simuler un délai pour une meilleure expérience utilisateur
            setTimeout(() => {
              setDisplayedTransactionsCount(prev => prev + 20);
              setIsLoadingMore(false);
            }, 500);
          }
        },
        { threshold: 0.1 }
      );

      if (loadMoreRef.current) {
        observer.observe(loadMoreRef.current);
      }

      return () => {
        if (loadMoreRef.current) {
          observer.unobserve(loadMoreRef.current);
        }
      };
    }, [displayedTransactionsCount, isLoadingMore, groupedTransactions.length]);

    // Ajouter l'observateur de défilement pour le bouton "Retour en haut"
    useEffect(() => {
      const handleScroll = () => {
        setShowScrollTop(window.scrollY > 300);
      };

      window.addEventListener('scroll', handleScroll);
      return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    const scrollToTop = () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    return (
      <Card className="border border-gray-200 shadow-sm overflow-hidden bg-white">
        <CardHeader className="bg-gradient-to-r from-gray-50 to-white border-b border-gray-200">
          <CardTitle className="text-xl">{title}</CardTitle>
          <CardDescription className="text-gray-600">
            {description} • {displayedTransactionsCount} sur {groupedTransactions.length} transactions affichées
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          <Table>
            <TableHeader className="bg-gray-50/50">
              <TableRow className="hover:bg-gray-50/80">
                <TableHead className="w-[50px]"></TableHead>
                <TableHead className="w-[200px]">Propriété</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Catégorie</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Montant</TableHead>
                <TableHead>Méthode</TableHead>
                <TableHead>Statut</TableHead>
                <TableHead className="w-[100px]">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              <AnimatePresence mode="popLayout">
                {groupedTransactions.slice(0, displayedTransactionsCount).map((group) => {
                  // Utiliser la nouvelle fonction pour générer une clé unique
                  const groupKey = generateGroupKey(group);
                  const isExpanded = expandedGroups.has(groupKey);
                  
                  return (
                    <Fragment key={groupKey}>
                  <motion.tr
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    className="group hover:bg-gray-50/50 border-b border-gray-100 transition-colors"
                  >
                    <TableCell>
                      <div className="flex items-center gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => toggleGroup(groupKey)}
                              className="p-0 h-6 w-6"
                            >
                              <ChevronDown className={cn(
                                "h-4 w-4 transition-transform",
                                isExpanded ? "transform rotate-180" : ""
                              )} />
                            </Button>
                            <Badge variant="secondary" className="ml-2">
                              {group.transactionCount}
                            </Badge>
                      </div>
                    </TableCell>
                    <TableCell>
                          <div className="flex items-center gap-2">
                            {renderCategoryIcon(group.category)}
                            {group.propertyName}
                          </div>
                        </TableCell>
                        <TableCell>
                          {group.transactionCount > 1 ? (
                            <span className="text-sm text-gray-500">
                              {group.transactionCount} transactions
                            </span>
                          ) : (
                            group.transactions[0].description
                          )}
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline" className={cn("capitalize", typeColors[group.type])}>
                            {categoryLabels[group.category]}
                      </Badge>
                    </TableCell>
                    <TableCell>
                          <Badge variant="outline" className={cn("capitalize", typeColors[group.type])}>
                            {group.type === "income" ? "Revenu" : group.type === "expense" ? "Dépense" : "Crédit"}
                      </Badge>
                    </TableCell>
                    <TableCell className={cn(
                      "font-medium",
                          group.type === "income" ? "text-emerald-600" :
                            group.type === "expense" ? "text-rose-600" : "text-amber-600"
                    )}>
                          {group.type === "income" ? "+" : "-"}{new Intl.NumberFormat('fr-FR', {
                            style: 'currency',
                            currency: 'EUR'
                          }).format(group.totalAmount)}
                    </TableCell>
                    <TableCell>
                          {group.transactionCount > 1 ? (
                            <span className="text-sm text-gray-500">Multiple</span>
                          ) : (
                            paymentMethodLabels[group.transactions[0].paymentMethod as keyof typeof paymentMethodLabels]
                          )}
                    </TableCell>
                    <TableCell>
                          <Badge className={cn("capitalize", statusColors[group.transactions[0].status as TransactionStatus])}>
                            {statusLabels[group.transactions[0].status as keyof typeof statusLabels]}
                            </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                            {group.transactionCount === 1 ? (
                              <>
                          <Button
                            variant="ghost"
                                  size="sm"
                                  onClick={() => handleViewTransaction(group.transactions[0])}
                                >
                                  <Eye className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                                  size="sm"
                                  onClick={() => handleEditTransaction(group.transactions[0])}
                                >
                                  <Edit className="h-4 w-4" />
                          </Button>
                              </>
                            ) : (
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    className="h-8 w-8 p-0"
                                  >
                                    <ChevronDown className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem onClick={() => exportGroupToCSV(group)}>
                                    <FileSpreadsheet className="h-4 w-4 mr-2" />
                                    Exporter en CSV
                                  </DropdownMenuItem>
                                  <DropdownMenuItem onClick={() => {
                                    toast({
                                      title: "PDF",
                                      description: "Export PDF en cours de développement",
                                    });
                                  }}>
                                    <FileText className="h-4 w-4 mr-2" />
                                    Exporter en PDF
                                  </DropdownMenuItem>
                                  {group.transactionCount > 1 && (
                                    <DropdownMenuItem onClick={() => handleEditGroupTransactions(group)}>
                                      <Edit className="h-4 w-4 mr-2" />
                                      Modifier les transactions
                                    </DropdownMenuItem>
                                  )}
                                </DropdownMenuContent>
                              </DropdownMenu>
                            )}
                          </div>
                        </TableCell>
                      </motion.tr>
                      
                      {isExpanded && (
                        <motion.tr
                          key={`${groupKey}-expanded`}
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: "auto" }}
                          exit={{ opacity: 0, height: 0 }}
                          className="bg-gray-50/50"
                        >
                          <TableCell colSpan={9} className="p-0">
                            <div className="p-4 space-y-4">
                              <div className="flex items-center justify-between mb-4">
                                <div className="text-sm font-medium text-gray-500">
                                  Détails des transactions
                                </div>
                                <div className="flex items-center gap-2">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setSortConfig(prev => ({
                                      ...prev,
                                      key: 'date',
                                      direction: prev.direction === 'asc' ? 'desc' : 'asc'
                                    }))}
                                  >
                                    <Calendar className="h-4 w-4 mr-2" />
                                    Date
                                    {sortConfig.key === 'date' && (
                                      sortConfig.direction === 'asc' ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                    )}
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setSortConfig(prev => ({
                                      ...prev,
                                      key: 'amount',
                                      direction: prev.direction === 'asc' ? 'desc' : 'asc'
                                    }))}
                                  >
                                    <DollarSign className="h-4 w-4 mr-2" />
                                    Montant
                                    {sortConfig.key === 'amount' && (
                                      sortConfig.direction === 'asc' ? <ChevronUp className="h-4 w-4 ml-1" /> : <ChevronDown className="h-4 w-4 ml-1" />
                                    )}
                                  </Button>
                                </div>
                              </div>
                              <div className="space-y-2">
                                {sortTransactions(group.transactions, sortConfig).map((transaction, index) => (
                                  <div
                                    key={transaction.id}
                                    className="flex items-center justify-between p-3 bg-white rounded-md border border-gray-100 hover:bg-gray-50/50 transition-colors"
                                  >
                                    <div className="flex items-center gap-4">
                                      <div className="text-sm font-medium">
                                        {format(new Date(transaction.date), 'dd/MM/yyyy')}
                                      </div>
                                      <div className="text-sm text-gray-600">
                                        {transaction.description}
                                      </div>
                                    </div>
                                    <div className="flex items-center gap-4">
                                      <div className={cn(
                                        "text-sm font-medium",
                                        transaction.type === "income" ? "text-emerald-600" :
                                          transaction.type === "expense" ? "text-rose-600" : "text-amber-600"
                                      )}>
                                        {transaction.type === "income" ? "+" : "-"}{transaction.formattedAmount}
                                      </div>
                                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                                          size="sm"
                                          onClick={() => handleViewTransaction(transaction)}
                                        >
                                          <Eye className="h-4 w-4" />
                                        </Button>
                                        <Button
                                          variant="ghost"
                                          size="sm"
                          onClick={() => handleEditTransaction(transaction)}
                        >
                                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                                          size="sm"
                          onClick={() => handleDelete(transaction.id)}
                                          className="text-red-500 hover:text-red-600"
                        >
                                          <Trash2 className="h-4 w-4" />
                        </Button>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                      </div>
                    </TableCell>
                  </motion.tr>
                      )}
                    </Fragment>
                  );
                })}
              </AnimatePresence>
            </TableBody>
          </Table>
          {groupedTransactions.length > displayedTransactionsCount && (
            <div 
              ref={loadMoreRef} 
              className="p-4 text-center border-t bg-gray-50/50"
            >
              {isLoadingMore ? (
                <div className="flex items-center justify-center gap-2 text-gray-500">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Chargement des transactions...
                </div>
              ) : (
                <div className="h-4" /> // Espace vide pour le trigger
              )}
            </div>
          )}
        </CardContent>
      </Card>
    );
  };

  const handlePreviewDocument = (documentId: number | null, documentIds?: number[]) => {
    console.log("handlePreviewDocument appelé avec documentId:", documentId, "documentIds:", documentIds);
    
    if (!documentId && (!documentIds || documentIds.length === 0)) {
      toast({
        title: "Information",
        description: "Aucun document disponible pour cette transaction",
        variant: "default",
      });
      return;
    }
    
    if (documentIds && documentIds.length > 0) {
      setSelectedDocumentIds(documentIds);
      setCurrentDocumentIndex(0);
      setSelectedDocumentId(documentIds[0]);
    } 
    else if (documentId) {
      setSelectedDocumentId(documentId);
      setSelectedDocumentIds([documentId]);
      setCurrentDocumentIndex(0);
    }
    
    console.log("Avant setShowPreview, état actuel:", showPreview);
    setShowPreview(true);
    console.log("Après setShowPreview, nouvel état défini à true");
  };

  const handleDeleteDocument = async (documentId: number) => {
    try {
      const response = await fetch(`/api/documents/${documentId}`, {
        method: 'DELETE',
      });

      if (!response.ok) throw new Error('Erreur lors de la suppression du document');

      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });
      toast({
        title: 'Succès',
        description: 'Document supprimé avec succès',
      });

      setShowDeleteConfirm(false);
      setDocumentToDelete(null);
    } catch (error) {
      toast({
        title: 'Erreur',
        description: 'Impossible de supprimer le document',
        variant: 'destructive',
      });
    }
  };

  const handleDocumentUpload = async (files: File[]) => {
    if (!selectedTransaction) return;

    setIsUploading(true);
    const formData = new FormData();
    files.forEach(file => formData.append('documents', file));

    try {
      console.log("Uploading documents to transaction:", selectedTransaction.id, "Files count:", files.length);
      const response = await fetch(`/api/transactions/${selectedTransaction.id}/documents`, {
        method: 'POST',
        body: formData,
        // Ne pas définir manuellement le Content-Type pour les requêtes multipart/form-data avec fetch
        // Le navigateur l'ajoute automatiquement avec la boundary nécessaire
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Upload error:', response.status, errorText);
        throw new Error(`Erreur lors du téléchargement: ${response.status} ${errorText}`);
      }

      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });
      toast({
        title: 'Succès',
        description: 'Documents ajoutés avec succès',
      });
    } catch (error) {
      toast({
        title: 'Erreur',
        description: 'Impossible de télécharger les documents',
        variant: 'destructive',
      });
    } finally {
      setIsUploading(false);
    }
  };

  const handleViewTransaction = (transaction: FormattedTransaction) => {
    console.log('View transaction:', transaction);
  };

  const renderCategoryIcon = (category: keyof typeof categoryLabels) => {
    const IconComponent = transactionIcons[category];
    return IconComponent ? <IconComponent className="h-4 w-4 text-blue-500" /> : <Home className="h-4 w-4 text-blue-500" />;
  };

  const AdvancedFiltersComponent = () => (
    <div className="p-4 border-t border-gray-200">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label>Période</Label>
          <div className="flex gap-2">
            <DatePicker
              date={advancedFilters.dateRange.start as Date | undefined}
              setDate={(date) => setAdvancedFilters(prev => ({
                ...prev,
                dateRange: { ...prev.dateRange, start: date || null }
              }))}
            />
            <DatePicker
              date={advancedFilters.dateRange.end as Date | undefined}
              setDate={(date) => setAdvancedFilters(prev => ({
                ...prev,
                dateRange: { ...prev.dateRange, end: date || null }
              }))}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label>Montant</Label>
          <div className="flex gap-2">
            <Input
              type="number"
              placeholder="Min"
              value={advancedFilters.amountRange.min || ""}
              onChange={(e) => setAdvancedFilters(prev => ({
                ...prev,
                amountRange: { ...prev.amountRange, min: e.target.value ? Number(e.target.value) : null }
              }))}
            />
            <Input
              type="number"
              placeholder="Max"
              value={advancedFilters.amountRange.max || ""}
              onChange={(e) => setAdvancedFilters(prev => ({
                ...prev,
                amountRange: { ...prev.amountRange, max: e.target.value ? Number(e.target.value) : null }
              }))}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label>Catégories</Label>
          <select
            multiple
            className="w-full rounded-md border p-2"
            value={advancedFilters.categories}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
              setAdvancedFilters(prev => ({
                ...prev,
                categories: selectedOptions
              }));
            }}
          >
            {Object.entries(categoryLabels).map(([key, label]) => (
              <option key={key} value={key}>
                {label}
              </option>
            ))}
          </select>
        </div>
        <div className="space-y-2">
          <Label>Méthodes de paiement</Label>
          <select
            multiple
            className="w-full rounded-md border p-2"
            value={advancedFilters.paymentMethods}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
              setAdvancedFilters(prev => ({
                ...prev,
                paymentMethods: selectedOptions
              }));
            }}
          >
            {Object.entries(paymentMethodLabels).map(([key, label]) => (
              <option key={key} value={key}>
                {label}
              </option>
            ))}
          </select>
        </div>
      </div>
    </div>
  );

  const parentRef = useRef<HTMLDivElement>(null);
  const rowVirtualizer = useVirtualizer({
    count: allGroupedTransactions.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 50,
    overscan: 5
  });

  const statistics = useMemo(() => {
    const totalIncome = transactions
      .filter(t => t.type === 'income')
      .reduce((sum, t) => sum + Number(t.amount), 0);
    
    const totalExpenses = transactions
      .filter(t => t.type === 'expense')
      .reduce((sum, t) => sum + Number(t.amount), 0);
    
    const totalCredits = transactions
      .filter(t => t.type === 'credit')
      .reduce((sum, t) => sum + Number(t.amount), 0);

    return {
      totalIncome,
      totalExpenses,
      totalCredits,
      balance: totalIncome - totalExpenses - totalCredits
    };
  }, [transactions]);

  const handleEditGroupTransactions = (group: GroupedTransaction) => {
    setSelectedTransaction(group.transactions[0]);
    setTransactionsToEdit(group.transactions);
    setShowBulkEditDialog(true);
  };

  const toggleTransactionSelection = (transactionId: number) => {
    setSelectedTransactionIds(prev => {
      const newSelection = new Set(prev);
      if (newSelection.has(transactionId)) {
        newSelection.delete(transactionId);
      } else {
        newSelection.add(transactionId);
      }
      return newSelection;
    });
  };

  const handleBulkCategoryChange = () => {
    // Cette fonction n'est plus nécessaire avec la nouvelle interface
    console.log("Sélection de catégorie dans la nouvelle interface");
  };

  const handleBulkStatusChange = () => {
    // Cette fonction n'est plus nécessaire avec la nouvelle interface
    console.log("Sélection de statut dans la nouvelle interface");
  };

  const handleBulkPaymentMethodChange = () => {
    // Cette fonction n'est plus nécessaire avec la nouvelle interface
    console.log("Sélection de méthode de paiement dans la nouvelle interface");
  };

  const toggleAllTransactions = () => {
    if (selectedTransactionIds.size === transactionsToEdit.length) {
      setSelectedTransactionIds(new Set());
    } else {
      setSelectedTransactionIds(new Set(transactionsToEdit.map(t => t.id)));
    }
  };

  const applyBulkChanges = async () => {
    if (selectedTransactionIds.size === 0) {
      toast({
        title: "Attention",
        description: "Aucune transaction sélectionnée",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsLoading(true);
      
      const updateData: any = {};
      
      if (newCategory) {
        console.log("Mise à jour de la catégorie:", newCategory);
        updateData.category = newCategory;
      }
      
      if (newStatus) {
        console.log("Mise à jour du statut:", newStatus);
        updateData.status = newStatus;
      }
      
      if (newPaymentMethod) {
        console.log("Mise à jour de la méthode de paiement:", newPaymentMethod);
        updateData.paymentMethod = newPaymentMethod;
      }
      
      if (Object.keys(updateData).length === 0) {
        toast({
          title: "Information",
          description: "Veuillez sélectionner au moins une modification à appliquer (catégorie, statut ou méthode de paiement)",
          variant: "default"
        });
        setIsLoading(false);
        return;
      }
      
      console.log('Mise à jour groupée pour', selectedTransactionIds.size, 'transactions avec:', updateData);
      
      const promises = Array.from(selectedTransactionIds).map(id => 
        fetch(`/api/transactions/${id}`, {
          method: 'PATCH',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(updateData)
        })
      );
      
      const results = await Promise.all(promises);
      console.log("Résultats des mises à jour:", results.map(r => r.status));
      
      // Forcer un rafraîchissement complet des données pour garantir un regroupement correct
      await queryClient.invalidateQueries({ 
        queryKey: ['/api/transactions'],
        refetchType: 'all'
      });
      
      toast({
        title: 'Succès',
        description: `${selectedTransactionIds.size} transactions mises à jour avec succès`,
      });
      
      setNewCategory("");
      setNewStatus("");
      setNewPaymentMethod("");
      setShowBulkEditDialog(false);
      
    } catch (error) {
      console.error('Erreur lors de la mise à jour groupée:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de mettre à jour les transactions. Veuillez réessayer.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (!showPreview && !hasCleanedUp.current) {
      // Nettoyer tous les états liés aux documents
      setSelectedDocumentId(null);
      setSelectedDocumentIds([]);
      setCurrentDocumentIndex(0);
      setShowEditDialog(false);
      setSelectedTransaction(null);
      setIsUploading(false);
      setDocumentToDelete(null);
      setShowDeleteConfirm(false);
      setSelectedFolderId(null);
      setIsCreatingFolder(false);
      setNewFolderName("");
      setExpandedGroups(new Set());
      setSortConfig({ key: 'date', direction: 'desc' });
      setAdvancedFilters({
        dateRange: { start: null, end: null },
        amountRange: { min: null, max: null },
        categories: [],
        paymentMethods: [],
        status: [],
        grouping: 'property-type-category',
        sortByDate: 'desc',
        sortByPeriod: null,
        selectedDates: []
      });
      setShowAdvancedFilters(false);
      setSearchQuery("");
      setAnimatingAction(null);
      setAnimationComplete(false);
      setTransactionsToEdit([]);
      setShowBulkEditDialog(false);
      setSelectedTransactionIds(new Set());
      setNewCategory("");
      setNewStatus("");
      setNewPaymentMethod("");
      hasCleanedUp.current = true;
    } else if (showPreview) {
      hasCleanedUp.current = false;
    }
  }, [showPreview]);

  // Nous devons fixer le problème dans la mise à jour des filtres avancés à la ligne qui cause l'erreur
  // Remplacer setAdvancedFilters par une version qui s'assure que selectedDates est toujours un tableau de Date sans undefined
  const updateAdvancedFilters = (newFilters: SafeAdvancedFilters | ((prev: AdvancedFilters) => SafeAdvancedFilters)) => {
    if (typeof newFilters === 'function') {
      setAdvancedFilters(prev => {
        const result = newFilters(prev);
        // Assurons-nous que selectedDates ne contient pas de undefined
        return {
          ...result,
          selectedDates: result.selectedDates.filter((date): date is Date => date !== undefined)
        };
      });
    } else {
      setAdvancedFilters({
        ...newFilters,
        selectedDates: newFilters.selectedDates.filter((date): date is Date => date !== undefined)
      });
    }
  };

  // ... et pour les endroits où nous avons besoin de travailler avec les dates potentiellement undefined
  const safeGetSelectedDates = (dates: (Date | undefined)[]): Date[] => {
    return dates.filter((date): date is Date => date !== undefined);
  };

  // Fonction pour gérer les changements de dates sélectionnées de manière optimisée
  const handleSelectedDatesChange = (index: number, date?: Date) => {
    updateAdvancedFilters(prev => {
      const newDates = [...prev.selectedDates];
      if (date) {
        newDates[index] = date;
      } else {
        if (index < newDates.length) {
          newDates.splice(index, 1);
        }
      }
      return {
        ...prev,
        selectedDates: newDates
      };
    });
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  return (
    <div className="space-y-6">
      <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Confirmer la suppression</AlertDialogTitle>
            <AlertDialogDescription>
              Êtes-vous sûr de vouloir supprimer ce document ? Cette action est irréversible.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setDocumentToDelete(null)}>Annuler</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => documentToDelete && handleDeleteDocument(documentToDelete)}
              className="bg-red-500 hover:bg-red-600"
            >
              Supprimer
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      <div className="flex items-center justify-between gap-4 flex-wrap">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-500" />
          <Input
            placeholder="Recherche globale..."
            value={filters.search}
            onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
            className="pl-9 bg-white focus:ring-2 focus:ring-blue-500 border-gray-200"
          />
        </div>

        <div className="flex items-center gap-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="gap-2">
                <SlidersHorizontal className="h-4 w-4" />
                Filtres avancés
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[500px] p-6 bg-gradient-to-br from-white via-white to-blue-50/30 border-blue-200/50 shadow-xl backdrop-blur-sm">
              <div className="grid gap-6">
                <div className="flex justify-between items-center mb-2">
                  <h3 className="font-semibold text-xl text-gray-800 flex items-center gap-2">
                    <Filter className="h-5 w-5 text-blue-500" />
                    Filtres avancés
                  </h3>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="h-8 hover:bg-blue-100 text-blue-600 border-blue-200 flex items-center gap-1 transition-all duration-200"
                    onClick={() => {
                      setFilters({
                        search: '',
                        type: 'all',
                        category: 'all',
                        property: 'all',
                        paymentMethod: 'all',
                        dateRange: undefined
                      });
                      updateAdvancedFilters({
                        dateRange: { start: null, end: null },
                        amountRange: { min: null, max: null },
                        categories: [],
                        paymentMethods: [],
                        status: [],
                        grouping: 'property-type-category',
                        sortByDate: 'desc',
                        sortByPeriod: null,
                        selectedDates: []
                      });
                    }}
                  >
                    <RefreshCw className="h-3.5 w-3.5" /> 
                    <span className="text-xs">Réinitialiser</span>
                  </Button>
                </div>
                
                <Separator className="bg-blue-100" />
                
                <div className="grid grid-cols-2 gap-6">
                <motion.div 
                  className="space-y-3"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <h4 className="font-medium leading-none flex items-center gap-2">
                    {filters.type === 'income' && <ArrowUpCircle className="h-4 w-4 text-emerald-500" />}
                    {filters.type === 'expense' && <ArrowDownCircle className="h-4 w-4 text-rose-500" />}
                    {filters.type === 'credit' && <CreditCardIcon className="h-4 w-4 text-amber-500" />}
                    {filters.type === 'all' && <Filter className="h-4 w-4 text-blue-500" />}
                    <span>Type de transaction</span>
                    {filters.type !== 'all' && (
                      <Badge 
                        variant="secondary"
                        className={cn(
                          "h-5 px-1.5 text-[10px] font-medium",
                          filters.type === 'income' && "bg-emerald-50 text-emerald-600 border-emerald-100",
                          filters.type === 'expense' && "bg-rose-50 text-rose-600 border-rose-100",
                          filters.type === 'credit' && "bg-amber-50 text-amber-600 border-amber-100"
                        )}
                      >
                        {filters.type === "income" ? "Revenus" : 
                         filters.type === "expense" ? "Dépenses" : "Crédits"}
                      </Badge>
                    )}
                  </h4>
                  <Combobox
                    value={filters.type}
                    onValueChange={(value: string) => setFilters(prev => ({ ...prev, type: value }))}
                    options={[
                      { value: 'all', label: 'Tous les types' },
                      { value: 'income', label: 'Revenus' },
                      { value: 'expense', label: 'Dépenses' },
                      { value: 'credit', label: 'Crédits' }
                    ]}
                    placeholder="Sélectionner un type"
                    className={cn(
                      "w-full",
                      filters.type === 'all' ? "border-blue-200 bg-blue-50/50 text-blue-700" : 
                      filters.type === 'income' ? "text-emerald-700 border-emerald-300 bg-emerald-50" :
                      filters.type === 'expense' ? "text-rose-700 border-rose-300 bg-rose-50" :
                      "text-amber-700 border-amber-300 bg-amber-50"
                    )}
                  />
                </motion.div>

                <motion.div 
                  className="space-y-3"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.05 }}
                >
                  <h4 className="font-medium leading-none flex items-center gap-2">
                    <Tag className="h-4 w-4 text-purple-500" />
                    <span>Catégorie</span>
                    {filters.category !== 'all' && (
                      <Badge 
                        variant="secondary"
                        className="h-5 px-1.5 text-[10px] font-medium bg-purple-50 text-purple-600 border-purple-100"
                      >
                        {categoryLabels[filters.category as keyof typeof categoryLabels]}
                      </Badge>
                    )}
                  </h4>
                  <Combobox
                    value={filters.category}
                    onValueChange={(value: string) => setFilters(prev => ({ ...prev, category: value }))}
                    options={[
                      { value: 'all', label: 'Toutes les catégories' },
                      ...Object.entries(categoryLabels).map(([value, label]) => ({
                        value,
                        label
                      }))
                    ]}
                    placeholder="Sélectionner une catégorie"
                    className={cn(
                      "w-full",
                      filters.category === 'all' ? "border-blue-200 bg-blue-50/50 text-blue-700" : "text-purple-700 border-purple-300 bg-purple-50"
                    )}
                  />
                </motion.div>

                <motion.div 
                  className="space-y-3"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.1 }}
                >
                  <h4 className="font-medium leading-none flex items-center gap-2">
                    <Building2 className="h-4 w-4 text-indigo-500" />
                    <span>Propriété</span>
                    {filters.property !== 'all' && (
                      <Badge 
                        variant="secondary"
                        className="h-5 px-1.5 text-[10px] font-medium bg-indigo-50 text-indigo-600 border-indigo-100"
                      >
                        {filters.property}
                      </Badge>
                    )}
                  </h4>
                  <Combobox
                    value={filters.property}
                    onValueChange={(value: string) => {
                      // Si l'utilisateur sélectionne la même propriété ou "all", revenir à "all"
                      const newValue = value === filters.property || value === "" ? "all" : value;
                      setFilters(prev => ({ ...prev, property: newValue }));
                    }}
                    options={[
                      { value: 'all', label: 'Toutes les propriétés' },
                      ...Array.from(new Set(transactions.map(t => t.propertyName))).map(property => ({
                        value: property,
                        label: property
                      }))
                    ]}
                    placeholder="Sélectionner une propriété"
                    className={cn(
                      "w-full",
                      filters.property === 'all' ? "border-blue-200 bg-blue-50/50 text-blue-700" : "text-indigo-700 border-indigo-300 bg-indigo-50"
                    )}
                  />
                </motion.div>

                <motion.div 
                  className="space-y-3"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.15 }}
                >
                  <h4 className="font-medium leading-none flex items-center gap-2">
                    <CreditCard className="h-4 w-4 text-teal-500" />
                    <span>Méthode de paiement</span>
                    {filters.paymentMethod !== 'all' && (
                      <Badge 
                        variant="secondary"
                        className="h-5 px-1.5 text-[10px] font-medium bg-teal-50 text-teal-600 border-teal-100"
                      >
                        {paymentMethodLabels[filters.paymentMethod as keyof typeof paymentMethodLabels]}
                      </Badge>
                    )}
                  </h4>
                  <Combobox
                    value={filters.paymentMethod}
                    onValueChange={(value: string) => setFilters(prev => ({ ...prev, paymentMethod: value }))}
                    options={[
                      { value: 'all', label: 'Toutes les méthodes' },
                      ...Object.entries(paymentMethodLabels).map(([value, label]) => ({
                        value,
                        label
                      }))
                    ]}
                    placeholder="Sélectionner une méthode"
                    className={cn(
                      "w-full",
                      filters.paymentMethod === 'all' ? "border-blue-200 bg-blue-50/50 text-blue-700" : "text-teal-700 border-teal-300 bg-teal-50"
                    )}
                  />
                </motion.div>
              </div>

                <Separator className="bg-blue-100" />

                <div className="grid grid-cols-2 gap-6">
                  <motion.div 
                    className="space-y-3"
                    initial={{ opacity: 0, y: 5 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.2, delay: 0.2 }}
                  >
                    <h4 className="font-medium leading-none flex items-center gap-2">
                      <Layers className="h-4 w-4 text-blue-500" />
                      <span>Regroupement</span>
                      {advancedFilters.grouping !== 'property-type-category' && (
                        <Badge 
                          variant="secondary"
                          className="h-5 px-1.5 text-[10px] font-medium bg-blue-50 text-blue-600 border-blue-100"
                        >
                          {advancedFilters.grouping === 'property-category' ? 'Propriété + Catégorie' :
                           advancedFilters.grouping === 'type-category' ? 'Type + Catégorie' :
                           advancedFilters.grouping === 'category' ? 'Catégorie uniquement' : 'Aucun'}
                        </Badge>
                      )}
                    </h4>
                    <Combobox
                      value={advancedFilters.grouping}
                      onValueChange={(value: string) => setAdvancedFilters(prev => ({ ...prev, grouping: value as AdvancedFilters['grouping'] }))}
                      options={[
                        { value: 'property-type-category', label: 'Propriété + Type + Catégorie' },
                        { value: 'property-category', label: 'Propriété + Catégorie' },
                        { value: 'type-category', label: 'Type + Catégorie' },
                        { value: 'category', label: 'Catégorie uniquement' },
                        { value: 'property-type', label: 'Propriété + Type' },
                        { value: 'property', label: 'Propriété uniquement' },
                        { value: 'type', label: 'Type uniquement' },
                        { value: 'month', label: 'Par mois' },
                        { value: 'month-category', label: 'Mois + Catégorie' },
                        { value: 'month-type', label: 'Mois + Type' },
                        { value: 'month-property', label: 'Mois + Propriété' },
                        { value: 'none', label: 'Aucun regroupement' }
                      ]}
                      placeholder="Sélectionner un regroupement"
                      className={cn(
                        "w-full",
                        advancedFilters.grouping === 'property-type-category' ? "border-blue-200 bg-blue-50/50 text-blue-700" : "text-blue-700 border-blue-300 bg-blue-50"
                      )}
                    />
                  </motion.div>

                  <motion.div 
                    className="space-y-3"
                    initial={{ opacity: 0, y: 5 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.2, delay: 0.25 }}
                  >
                    <h4 className="font-medium leading-none flex items-center gap-2">
                      <CalendarIcon className="h-4 w-4 text-blue-500" />
                      <span>Trier par date</span>
                      {advancedFilters.sortByDate && (
                        <Badge 
                          variant="secondary"
                          className="h-5 px-1.5 text-[10px] font-medium bg-blue-50 text-blue-600 border-blue-100"
                        >
                          {advancedFilters.sortByDate === 'asc' ? 'Plus ancien' : 'Plus récent'}
                        </Badge>
                      )}
                    </h4>
                    <Combobox
                      value={advancedFilters.sortByDate || ''}
                      onValueChange={(value: string) => setAdvancedFilters(prev => ({ 
                        ...prev, 
                        sortByDate: value as 'asc' | 'desc' | null 
                      }))}
                      options={[
                        { value: '', label: 'Sans tri' },
                        { value: 'desc', label: 'Plus récent' },
                        { value: 'asc', label: 'Plus ancien' }
                      ]}
                      placeholder="Sélectionner un tri"
                      className={cn(
                        "w-full",
                        advancedFilters.sortByDate === null ? "border-blue-200 bg-blue-50/50 text-blue-700" : "text-blue-700 border-blue-300 bg-blue-50"
                      )}
                    />
                  </motion.div>
                </div>

                <Separator className="bg-blue-100" />

                <motion.div 
                  className="space-y-3"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.35 }}
                >
                  <h4 className="font-medium leading-none flex items-center gap-2">
                    <CalendarIcon className="h-4 w-4 text-blue-500" />
                    <span>Sélectionner des dates</span>
                    {filters.dateRange?.from && filters.dateRange?.to && (
                      <Badge 
                        variant="secondary"
                        className="h-5 px-1.5 text-[10px] font-medium bg-blue-50 text-blue-600 border-blue-100"
                      >
                        {format(filters.dateRange.from, 'dd/MM/yyyy')} - {format(filters.dateRange.to, 'dd/MM/yyyy')}
                      </Badge>
                    )}
                  </h4>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label className="text-sm font-medium text-gray-700">Date de début</Label>
                        <Input
                          type="date"
                          className="w-full bg-white border-gray-200 focus:border-blue-500 focus:ring-blue-500"
                          value={filters.dateRange?.from?.toISOString().split('T')[0] || ''}
                          onChange={(e) => {
                            const date = e.target.value ? new Date(e.target.value) : undefined;
                            setFilters(prev => ({
                              ...prev,
                              dateRange: {
                                from: date,
                                to: prev.dateRange?.to
                              }
                            }));
                          }}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label className="text-sm font-medium text-gray-700">Date de fin</Label>
                        <Input
                          type="date"
                          className="w-full bg-white border-gray-200 focus:border-blue-500 focus:ring-blue-500"
                          value={filters.dateRange?.to?.toISOString().split('T')[0] || ''}
                          onChange={(e) => {
                            const date = e.target.value ? new Date(e.target.value) : undefined;
                            setFilters(prev => ({
                              ...prev,
                              dateRange: {
                                from: prev.dateRange?.from,
                                to: date
                              }
                            }));
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </motion.div>
              </div>
            </PopoverContent>
          </Popover>
        </div>
      </div>

      {showAdvancedFilters && <AdvancedFiltersComponent />}

      {(activeTab === "all" || activeTab === "completed") && (
        <TransactionTable
          title="Transactions complétées"
          description={`${completedTransactions.length} transactions complétées`}
          transactions={completedTransactions}
          type="income"
        />
      )}

      {(activeTab === "all" || activeTab === "pending") && (
        <TransactionTable
          title="Transactions en attente"
          description={`${pendingTransactions.length} transactions en attente`}
          transactions={pendingTransactions}
          type="expense"
        />
      )}

      {(activeTab === "all" || activeTab === "cancelled") && (
        <TransactionTable
          title="Transactions annulées"
          description={`${cancelledTransactions.length} transactions annulées`}
          transactions={cancelledTransactions}
          type="credit"
        />
      )}

      {/* Ajouter un commentaire de débogage */}
      {console.log("Rendu du dialog, showPreview:", showPreview, "selectedDocumentId:", selectedDocumentId)}
      
      <Dialog open={showPreview} onOpenChange={setShowPreview}>
        <DialogContent className="max-w-4xl h-[90vh]">
          <DialogHeader className="flex flex-row items-center justify-between">
            <div className="flex items-center gap-2">
              <DialogTitle>
                {selectedDocumentIds.length > 1 
                  ? `Document ${currentDocumentIndex + 1}/${selectedDocumentIds.length}` 
                  : "Document de la transaction"}
              </DialogTitle>
              {selectedDocumentIds.length > 1 && (
                <Badge variant="outline" className="bg-blue-50 text-blue-600">
                  {selectedDocumentIds.length} documents
                </Badge>
              )}
            </div>
            
            {selectedDocumentIds.length > 1 && (
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  disabled={currentDocumentIndex === 0}
                  onClick={() => {
                    if (currentDocumentIndex > 0) {
                      setCurrentDocumentIndex(currentDocumentIndex - 1);
                      setSelectedDocumentId(selectedDocumentIds[currentDocumentIndex - 1]);
                    }
                  }}
                  className="h-8 w-8 p-0"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="m15 18-6-6 6-6" />
                  </svg>
                </Button>
                <span className="text-sm text-gray-500">
                  {currentDocumentIndex + 1} / {selectedDocumentIds.length}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  disabled={currentDocumentIndex === selectedDocumentIds.length - 1}
                  onClick={() => {
                    if (currentDocumentIndex < selectedDocumentIds.length - 1) {
                      setCurrentDocumentIndex(currentDocumentIndex + 1);
                      setSelectedDocumentId(selectedDocumentIds[currentDocumentIndex + 1]);
                    }
                  }}
                  className="h-8 w-8 p-0"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="m9 18 6-6-6-6" />
                  </svg>
                </Button>
              </div>
            )}
          </DialogHeader>
          <div className="flex-1 w-full h-full min-h-[600px] mt-4">
            {selectedDocumentId && (
              <iframe
                src={`/api/documents/${selectedDocumentId}/preview`}
                className="w-full h-full border-0 rounded-md"
                title={`Document Preview ${currentDocumentIndex + 1}`}
                key={selectedDocumentId}
              />
            )}
          </div>
        </DialogContent>
      </Dialog>
      
      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>
        <DialogContent className="max-w-2xl max-h-[90vh] p-0 gap-0 bg-gradient-to-br from-background via-background/80 to-blue-500/10 border-blue-500/20 overflow-y-auto">
          <DialogDescription className="sr-only">
            Formulaire de modification de transaction
          </DialogDescription>
          <div className="p-6 space-y-6">
            <DialogHeader>
              <DialogTitle className="text-xl font-semibold bg-gradient-to-r from-blue-500 to-cyan-500 bg-clip-text text-transparent flex items-center gap-2">
                <Edit className="h-6 w-6 text-blue-500" />
                Modifier la transaction
              </DialogTitle>
              <DialogDescription className="text-base text-muted-foreground/80">
                Modifiez les informations de la transaction existante
              </DialogDescription>
            </DialogHeader>
            
            {selectedTransaction && (
              <div className="space-y-6">
                <motion.div 
                  className="grid gap-6 sm:grid-cols-2"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      <CalendarIcon className="h-4 w-4 text-blue-500" />
                      Date
                    </label>
                    <Input 
                      type="date" 
                      defaultValue={selectedTransaction.date || ''} 
                      id="edit-transaction-date"
                      className="bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      {selectedTransaction.type === 'income' && <ArrowUpCircle className="h-4 w-4 text-emerald-500" />}
                      {selectedTransaction.type === 'expense' && <ArrowDownCircle className="h-4 w-4 text-rose-500" />}
                      {selectedTransaction.type === 'credit' && <CreditCardIcon className="h-4 w-4 text-amber-500" />}
                      Type
                    </label>
                    <select 
                      className={cn(
                        "w-full rounded-md border p-2 bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors",
                        selectedTransaction.type === 'income' && "text-emerald-600",
                        selectedTransaction.type === 'expense' && "text-rose-600",
                        selectedTransaction.type === 'credit' && "text-amber-600"
                      )}
                      defaultValue={selectedTransaction.type}
                      id="edit-transaction-type"
                    >
                      <option value="income">Revenu</option>
                      <option value="expense">Dépense</option>
                      <option value="credit">Crédit</option>
                    </select>
                  </div>
                </motion.div>
                
                <Separator className="bg-border/50" />
                
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.1 }}
                >
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      <FileText className="h-4 w-4 text-blue-500" />
                      Description
                    </label>
                    <Input 
                      defaultValue={selectedTransaction.description || ''} 
                      id="edit-transaction-description"
                      className="bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors"
                    />
                  </div>
                </motion.div>
                
                <Separator className="bg-border/50" />
                
                <motion.div 
                  className="grid gap-6 sm:grid-cols-2"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.2 }}
                >
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      <Tag className="h-4 w-4 text-blue-500" />
                      Catégorie
                    </label>
                    <select 
                      className="w-full rounded-md border p-2 bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors"
                      defaultValue={selectedTransaction.category || 'rent'}
                      id="edit-transaction-category"
                    >
                      {Object.entries(categoryLabels).map(([value, label]) => (
                        <option key={value} value={value}>{label}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      <Euro className="h-4 w-4 text-blue-500" />
                      Montant (€)
                    </label>
                    <Input 
                      type="number" 
                      step="0.01" 
                      defaultValue={selectedTransaction.amount} 
                      id="edit-transaction-amount"
                      className="font-mono bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors"
                    />
                  </div>
                </motion.div>
                
                <Separator className="bg-border/50" />
                
                <motion.div 
                  className="grid gap-6 sm:grid-cols-2"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: 0.3 }}
                >
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      <CreditCard className="h-4 w-4 text-blue-500" />
                      Méthode de paiement
                    </label>
                    <select 
                      className="w-full rounded-md border p-2 bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors"
                      defaultValue={(selectedTransaction.paymentMethod as string) || 'bank_transfer'} 
                      id="edit-transaction-payment-method"
                    >
                      {Object.entries(paymentMethodLabels).map(([value, label]) => (
                        <option key={value} value={value}>{label}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="space-y-2">
                    <label className="font-medium leading-none flex items-center gap-2">
                      <Clock className="h-4 w-4 text-blue-500" />
                      Statut
                    </label>
                    <select 
                      className={cn(
                        "w-full rounded-md border p-2 bg-background/50 border-border/50 hover:border-blue-500/50 focus:border-blue-500/50 transition-colors",
                        selectedTransaction.status === 'completed' && "text-emerald-600",
                        selectedTransaction.status === 'pending' && "text-yellow-600",
                        selectedTransaction.status === 'cancelled' && "text-gray-600"
                      )}
                      defaultValue={selectedTransaction.status}
                      id="edit-transaction-status"
                    >
                      <option value="pending">En attente</option>
                      <option value="completed">Complété</option>
                      <option value="cancelled">Annulé</option>
                    </select>
                  </div>
                </motion.div>
                
                <Separator className="my-4" />
                
                <div className="mb-4">
                  <label className="block text-sm font-medium mb-2">
                    Documents joints ({selectedTransaction.documentIds?.length || 0})
                  </label>
                  
                  {selectedTransaction.documentIds && selectedTransaction.documentIds.length > 0 ? (
                    <div className="border border-gray-200 rounded-md mb-4 overflow-hidden">
                      {selectedTransaction.documentIds.map((docId, index) => (
                        <div 
                          key={docId} 
                          className="flex items-center justify-between p-3 bg-white"
                        >
                          <div className="flex items-center gap-2">
                            <FileText className="h-4 w-4 text-gray-600" />
                            <span className="text-sm">Document {index === 0 ? "(principal)" : ""}</span>
                            {index === 0 && (
                              <span className="text-xs bg-blue-50 text-blue-600 px-2 py-0.5 rounded-md">
                                Principal
                              </span>
                            )}
                          </div>
                          <div className="flex items-center">
                            {/* DocumentViewerButton remplacé par Button standard */}
                            <Button
                              variant="ghost"
                              size="sm"
                              className="p-1 text-gray-500 hover:text-gray-700"
                              onClick={() => {
                                console.log("Bouton standard pour preview - docId:", docId);
                                handlePreviewDocument(docId);
                              }}
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                setDocumentToDelete(docId);
                                setShowDeleteConfirm(true);
                              }}
                              className="p-1 text-gray-500 hover:text-gray-700"
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : null}

                  <div className="border border-dashed border-gray-300 rounded-md py-6 px-4 text-center">
                    <div className="flex flex-col items-center justify-center">
                      <div className="mb-3">
                        <FileText className="h-6 w-6 text-gray-400 mx-auto" />
                      </div>
                      <p className="text-sm font-medium mb-2">
                        Ajouter des documents (devis, factures, photos)
                      </p>
                      <p className="text-xs text-gray-500 mb-1">
                        Glissez et déposez jusqu'à 5 fichiers PDF ou cliquez pour parcourir
                      </p>
                      <p className="text-xs text-gray-400 mb-3">
                        Taille maximale: 10MB par fichier
                      </p>
                    </div>
                    
                    <div>
                      <PdfUpload
                        onFileSelected={(files) => {
                          if (Array.isArray(files)) {
                            handleDocumentUpload(files);
                          }
                        }}
                        multiple={true}
                        maxFiles={5}
                      />
                    </div>
                    
                    {isUploading && (
                      <div className="flex items-center justify-center gap-2 text-sm text-blue-600 mt-3">
                        <Loader2 className="h-4 w-4 animate-spin" />
                        Téléchargement en cours...
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="flex justify-end space-x-3 pt-6">
                  <Button 
                    variant="outline" 
                    onClick={() => setShowEditDialog(false)}
                    className="border-blue-500/20 hover:bg-blue-500/10 text-blue-700"
                  >
                    Annuler
                  </Button>
                  <Button 
                    onClick={() => {
                      const dateInput = document.getElementById('edit-transaction-date') as HTMLInputElement;
                      const typeInput = document.getElementById('edit-transaction-type') as HTMLSelectElement;
                      const descriptionInput = document.getElementById('edit-transaction-description') as HTMLInputElement;
                      const categoryInput = document.getElementById('edit-transaction-category') as HTMLSelectElement;
                      const amountInput = document.getElementById('edit-transaction-amount') as HTMLInputElement;
                      const paymentMethodInput = document.getElementById('edit-transaction-payment-method') as HTMLSelectElement;
                      const statusInput = document.getElementById('edit-transaction-status') as HTMLSelectElement;

                      const updateData = {
                        date: dateInput.value,
                        type: typeInput.value,
                        description: descriptionInput.value,
                        category: categoryInput.value,
                        amount: Number(amountInput.value),
                        paymentMethod: paymentMethodInput.value,
                        status: statusInput.value
                      };

                      // Validation des données avant l'envoi
                      if (!updateData.date || !updateData.type || !updateData.description || 
                          !updateData.category || !updateData.amount || !updateData.paymentMethod || 
                          !updateData.status) {
                        toast({
                          title: 'Erreur',
                          description: 'Veuillez remplir tous les champs obligatoires',
                          variant: 'destructive',
                        });
                        return;
                      }

                      // Validation du montant
                      if (isNaN(updateData.amount) || updateData.amount <= 0) {
                        toast({
                          title: 'Erreur',
                          description: 'Le montant doit être un nombre positif',
                          variant: 'destructive',
                        });
                        return;
                      }

                      // Validation du type
                      if (!['income', 'expense', 'credit'].includes(updateData.type)) {
                        toast({
                          title: 'Erreur',
                          description: 'Type de transaction invalide',
                          variant: 'destructive',
                        });
                        return;
                      }

                      // Validation de la catégorie
                      if (!Object.keys(categoryLabels).includes(updateData.category)) {
                        toast({
                          title: 'Erreur',
                          description: 'Catégorie invalide',
                          variant: 'destructive',
                        });
                        return;
                      }

                      // Validation du statut
                      if (!['pending', 'completed', 'cancelled'].includes(updateData.status)) {
                        toast({
                          title: 'Erreur',
                          description: 'Statut invalide',
                          variant: 'destructive',
                        });
                        return;
                      }

                      // Validation de la méthode de paiement
                      if (!Object.keys(paymentMethodLabels).includes(updateData.paymentMethod)) {
                        toast({
                          title: 'Erreur',
                          description: 'Méthode de paiement invalide',
                          variant: 'destructive',
                        });
                        return;
                      }

                      console.log('Données à envoyer:', updateData);
                      
                      fetch(`/api/transactions/${selectedTransaction.id}`, {
                        method: 'PATCH',
                        headers: {
                          'Content-Type': 'application/json',
                          'Accept': 'application/json'
                        },
                        body: JSON.stringify(updateData)
                      })
                      .then(async response => {
                        if (!response.ok) {
                          const errorData = await response.json();
                          throw new Error(errorData.error || `Erreur HTTP: ${response.status}`);
                        }
                        return response.json();
                      })
                      .then(updatedData => {
                        console.log('Transaction mise à jour:', updatedData);
                        
                        // Forcer immédiatement un rafraîchissement complet pour garantir un regroupement correct
                        return queryClient.invalidateQueries({ 
                          queryKey: ['/api/transactions'],
                          refetchType: 'all'
                        });
                      })
                      .then(() => {
                        toast({
                          title: 'Succès',
                          description: 'La transaction a été mise à jour',
                        });
                        setShowEditDialog(false);
                        
                        // Forcer un rafraîchissement complet des données pour garantir un regroupement correct
                        queryClient.invalidateQueries({ 
                          queryKey: ['/api/transactions'],
                          refetchType: 'all'
                        });
                      })
                      .catch(error => {
                        console.error('Erreur complète:', error);
                        toast({
                          title: 'Erreur',
                          description: error.message || 'Impossible de mettre à jour la transaction',
                          variant: 'destructive',
                        });
                      });
                    }}
                    className="gap-2 bg-gradient-to-r from-blue-500 via-cyan-500 to-sky-500 hover:from-blue-600 hover:via-cyan-600 hover:to-sky-600 shadow-lg hover:shadow-xl transition-all duration-300"
                  >
                    <Edit className="h-4 w-4" />
                    Mettre à jour
                  </Button>
                </div>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={showBulkEditDialog} onOpenChange={setShowBulkEditDialog}>
        <DialogContent className="max-w-4xl max-h-[90vh] p-0 gap-0 overflow-hidden bg-white">
          <DialogHeader className="p-6 bg-gradient-to-r from-gray-50 to-white border-b">
            <DialogTitle className="text-xl">Modification groupée ({transactionsToEdit.length} transactions)</DialogTitle>
            <DialogDescription>
              Sélectionnez les transactions à modifier et appliquez les changements en masse
            </DialogDescription>
          </DialogHeader>
          
          <div className="p-6 border-b">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-3 p-4 border rounded-md bg-gray-50/50 hover:bg-blue-50/30 transition-colors">
                <h4 className="font-medium text-sm flex items-center gap-2">
                  <Tag className="h-4 w-4 text-blue-500" />
                      Modifier la catégorie
                </h4>
                      <Select value={newCategory} onValueChange={setNewCategory}>
                  <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Choisir une catégorie" />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(categoryLabels).map(([value, label]) => (
                            <SelectItem key={value} value={value}>{label}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      </div>

              <div className="space-y-3 p-4 border rounded-md bg-gray-50/50 hover:bg-blue-50/30 transition-colors">
                <h4 className="font-medium text-sm flex items-center gap-2">
                  <Clock className="h-4 w-4 text-blue-500" />
                      Modifier le statut
                </h4>
                      <Select value={newStatus} onValueChange={setNewStatus}>
                  <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Choisir un statut" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="pending">En attente</SelectItem>
                          <SelectItem value="completed">Complété</SelectItem>
                          <SelectItem value="cancelled">Annulé</SelectItem>
                        </SelectContent>
                      </Select>
                      </div>

              <div className="space-y-3 p-4 border rounded-md bg-gray-50/50 hover:bg-blue-50/30 transition-colors">
                <h4 className="font-medium text-sm flex items-center gap-2">
                  <CreditCard className="h-4 w-4 text-blue-500" />
                      Modifier la méthode
                </h4>
                      <Select value={newPaymentMethod} onValueChange={setNewPaymentMethod}>
                  <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Choisir une méthode" />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(paymentMethodLabels).map(([value, label]) => (
                            <SelectItem key={value} value={value}>{label}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      </div>
                    </div>
              </div>
              
          <div className="flex-1 overflow-hidden">
            <div className="h-[40vh] overflow-y-auto border-b">
                <Table>
                <TableHeader className="bg-gray-50 sticky top-0 z-10">
                    <TableRow>
                      <TableHead className="w-[40px]">
                        <input 
                          type="checkbox" 
                          className="rounded-sm" 
                          checked={selectedTransactionIds.size === transactionsToEdit.length && transactionsToEdit.length > 0}
                          onChange={toggleAllTransactions}
                        />
                      </TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead>Montant</TableHead>
                      <TableHead>Méthode</TableHead>
                      <TableHead>Catégorie</TableHead>
                      <TableHead>Statut</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {transactionsToEdit.map(transaction => (
                      <TableRow key={transaction.id} className="hover:bg-gray-50">
                        <TableCell>
                          <input 
                            type="checkbox" 
                            className="rounded-sm" 
                            checked={selectedTransactionIds.has(transaction.id)}
                            onChange={() => toggleTransactionSelection(transaction.id)}
                          />
                        </TableCell>
                        <TableCell>{transaction.formattedDate}</TableCell>
                        <TableCell>{transaction.description}</TableCell>
                        <TableCell className={cn(
                          "font-medium",
                          transaction.type === "income" ? "text-emerald-600" :
                            transaction.type === "expense" ? "text-rose-600" : "text-amber-600"
                        )}>
                          {transaction.type === "income" ? "+" : "-"}{transaction.formattedAmount}
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline">
                            {paymentMethodLabels[transaction.paymentMethod as keyof typeof paymentMethodLabels]}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline">
                          {categoryLabels[transaction.category as TransactionCategory]}
                          </Badge>
                        </TableCell>
                        <TableCell className="w-[100px]">
                          <Badge className={cn("capitalize", statusColors[transaction.status as TransactionStatus])}>
                            {statusLabels[transaction.status as keyof typeof statusLabels]}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => handleEditTransaction(transaction)}
                            className="h-8 w-8 p-0"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          
          <div className="p-6 border-t flex items-center justify-between gap-2">
            <div>
              <Badge variant="outline" className="bg-blue-50 text-blue-600">
                {selectedTransactionIds.size} sélectionnées sur {transactionsToEdit.length}
              </Badge>
          </div>
            
            <div className="flex gap-2">
            <Button variant="outline" onClick={() => setShowBulkEditDialog(false)}>
              Annuler
            </Button>
            <Button 
              onClick={applyBulkChanges}
                disabled={selectedTransactionIds.size === 0 || (!newCategory && !newStatus && !newPaymentMethod)}
                className={cn(
                  "gap-2 transition-all", 
                  selectedTransactionIds.size === 0 || (!newCategory && !newStatus && !newPaymentMethod) 
                    ? "opacity-50" 
                    : "bg-gradient-to-r from-blue-500 via-cyan-500 to-sky-500 hover:from-blue-600 hover:via-cyan-600 hover:to-sky-600 shadow-md hover:shadow-lg"
                )}
            >
              {isLoading ? (
                <span className="flex items-center gap-2">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Traitement...
                </span>
              ) : (
                  <>
                    <Edit className="h-4 w-4" />
                    Appliquer les modifications ({selectedTransactionIds.size})
                  </>
              )}
            </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <div ref={parentRef} className="w-full">
          {rowVirtualizer.getVirtualItems().map((virtualRow) => {
            const group = allGroupedTransactions[virtualRow.index];
            return (
              <div
                key={`${group.propertyId}-${group.type}-${group.category}`}
                style={{
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  width: '100%',
                  height: `${virtualRow.size}px`,
                  transform: `translateY(${virtualRow.start}px)`,
                }}
              >
                {/* ... existing group rendering ... */}
              </div>
            );
          })}
      </div>

      {showScrollTop && (
        <Button
          onClick={scrollToTop}
          className="fixed bottom-4 right-4 rounded-full shadow-lg bg-blue-500 hover:bg-blue-600 text-white p-2"
          size="icon"
        >
          <ChevronUp className="h-6 w-6" />
        </Button>
      )}
    </div>
  );
}