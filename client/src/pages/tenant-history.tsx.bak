import React, { useState } from 'react';
import { useLocation } from 'wouter';
import MainLayout from '@/components/layout/MainLayout';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { PlusCircle, History, Clock, Search, AlertTriangle, Filter } from 'lucide-react';
import TenantHistoryTable from '@/components/tenant-history/TenantHistoryTable';
import TenantHistoryDetails from '@/components/tenant-history/TenantHistoryDetails';
import TenantHistoryDialog from '@/components/tenant-history/TenantHistoryDialog';
import ReassignDialog from '@/components/tenant-history/ReassignDialog';
import { useToast } from '@/hooks/use-toast';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { TenantHistoryCategory, TenantHistoryStats } from '@/types/tenant-history';

const TenantHistoryPage: React.FC = () => {
  const [location, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // États locaux
  const [activeTab, setActiveTab] = useState<TenantHistoryCategory | 'all'>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showDetailsDialog, setShowDetailsDialog] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [showReassignDialog, setShowReassignDialog] = useState(false);
  const [selectedEntryId, setSelectedEntryId] = useState<number | undefined>(undefined);
  const [selectedTenantName, setSelectedTenantName] = useState<string | undefined>(undefined);
  
  // Récupération des statistiques
  const { data: stats, isLoading: statsLoading } = useQuery({
    queryKey: ['tenantHistoryStats'],
    queryFn: async () => {
      const response = await fetch('/api/tenant-history/stats');
      if (!response.ok) {
        throw new Error('Impossible de récupérer les statistiques');
      }
      return await response.json() as TenantHistoryStats;
    },
  });
  
  // Mutation pour réassigner une entrée orpheline
  const reassignMutation = useMutation({
    mutationFn: async ({ id, tenantId }: { id: number; tenantId: number }) => {
      const response = await fetch(`/api/tenant-history/${id}/reassign`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ tenantId }),
      });
      
      if (!response.ok) {
        throw new Error('Impossible de réassigner l\'entrée');
      }
      
      return await response.json();
    },
    onSuccess: () => {
      toast({
        title: 'Entrée réassignée',
        description: 'L\'entrée d\'historique a été réassignée avec succès',
      });
      
      // Invalidate queries to refetch data
      queryClient.invalidateQueries({ queryKey: ['tenantHistory'] });
      queryClient.invalidateQueries({ queryKey: ['tenantHistoryStats'] });
    },
    onError: (error) => {
      toast({
        title: 'Erreur',
        description: error.message,
        variant: 'destructive',
      });
    },
  });
  
  const handleViewDetails = (id: number) => {
    setSelectedEntryId(id);
    setShowDetailsDialog(true);
  };
  
  const handleOpenEditDialog = (entry: any) => {
    // Si un ID est passé directement (vieux format), sinon utiliser l'ID de l'entrée
    const entryId = typeof entry === 'number' ? entry : entry?.id;
    
    if (entryId) {
      setSelectedEntryId(entryId);
      setShowEditDialog(true);
      setShowDetailsDialog(false);
    }
  };
  
  const handleReassign = (id: number, tenantName?: string) => {
    // Ouvrir le dialogue de réassignation avec les paramètres fournis
    setSelectedEntryId(id);
    setSelectedTenantName(tenantName);
    setShowReassignDialog(true);
  };
  
  return (
    <MainLayout>
      <div className="container mx-auto p-4 space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Système de notation des locataires</h1>
            <p className="text-muted-foreground">
              Évaluation et suivi des locataires pour éviter les problèmes
            </p>
          </div>
          <Button onClick={() => setShowAddDialog(true)}>
            <PlusCircle className="h-4 w-4 mr-2" />
            Ajouter une évaluation
          </Button>
        </div>
        
        <div className="bg-blue-50 border border-blue-200 rounded-md p-4 text-blue-800">
          <h2 className="text-lg font-medium mb-2">À propos du système de notation</h2>
          <p className="text-sm mb-2">
            Ce module vous permet d'évaluer et de suivre les locataires actuels et anciens à travers différents critères :
          </p>
          <ul className="text-sm list-disc pl-5 space-y-1">
            <li>Ponctualité des paiements de loyer</li>
            <li>Respect de la propriété et entretien du logement</li>
            <li>Qualité de la communication et réactivité</li>
            <li>Respect du règlement et comportement général</li>
          </ul>
          <p className="text-sm mt-2">
            Les évaluations sont conservées même après la fin du bail, vous permettant de retrouver l'historique d'un locataire en cas de nouvelle demande de location.
          </p>
        </div>
        
        {/* Statistiques */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <History className="h-4 w-4 text-muted-foreground" />
                <h3 className="text-sm font-medium">Total des entrées</h3>
              </div>
              <div className="mt-2">
                <p className="text-2xl font-bold">
                  {statsLoading ? '...' : stats?.totalEntries || 0}
                </p>
                <p className="text-xs text-muted-foreground">
                  {statsLoading ? '...' : stats?.tenantsWithHistory || 0} locataires concernés
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-amber-500" />
                <h3 className="text-sm font-medium">Incidents récents</h3>
              </div>
              <div className="mt-2">
                <p className="text-2xl font-bold">
                  {statsLoading ? '...' : stats?.recentIncidents || 0}
                </p>
                <p className="text-xs text-muted-foreground">
                  Au cours des 30 derniers jours
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <Clock className="h-4 w-4 text-blue-500" />
                <h3 className="text-sm font-medium">Problèmes de paiement</h3>
              </div>
              <div className="mt-2">
                <p className="text-2xl font-bold">
                  {statsLoading ? '...' : stats?.paymentIssuesCount || 0}
                </p>
                <p className="text-xs text-muted-foreground">
                  Retards et défauts de paiement
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <Filter className="h-4 w-4 text-green-500" />
                <h3 className="text-sm font-medium">Évaluations positives</h3>
              </div>
              <div className="mt-2">
                <p className="text-2xl font-bold">
                  {statsLoading ? '...' : `${stats?.positiveRatingsPercentage || 0}%`}
                </p>
                <p className="text-xs text-muted-foreground">
                  Taux d'évaluations positives
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Filtres et recherche */}
        <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Rechercher par locataire, propriété, description..."
                className="pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          
          <div className="flex space-x-2">
            <Button 
              variant={activeTab === 'all' ? "default" : "outline"} 
              size="sm"
              onClick={() => setActiveTab('all')}
            >
              Tous
            </Button>
            <Button 
              variant={activeTab === 'general' ? "default" : "outline"} 
              size="sm"
              onClick={() => setActiveTab('general')}
            >
              Général
            </Button>
            <Button 
              variant={activeTab === 'paiement' ? "default" : "outline"} 
              size="sm"
              onClick={() => setActiveTab('paiement')}
            >
              Paiement
            </Button>
            <Button 
              variant={activeTab === 'incident' ? "default" : "outline"} 
              size="sm"
              onClick={() => setActiveTab('incident')}
            >
              Incidents
            </Button>
            <Button 
              variant={activeTab === 'comportement' ? "default" : "outline"} 
              size="sm"
              onClick={() => setActiveTab('comportement')}
            >
              Comportement
            </Button>
          </div>
        </div>
        
        {/* Tableau des entrées d'historique */}
        <TenantHistoryTable
          filter={activeTab}
          searchTerm={searchTerm}
          onViewDetails={handleViewDetails}
          onReassign={handleReassign}
        />
        
        {/* Dialogue de détails - toujours présent mais contrôlé par isOpen */}
        <TenantHistoryDetails
          id={selectedEntryId || 0}
          isOpen={showDetailsDialog && !!selectedEntryId}
          onClose={() => setShowDetailsDialog(false)}
          onEdit={handleOpenEditDialog}
        />
        
        {/* Dialogue d'ajout */}
        <TenantHistoryDialog
          open={showAddDialog}
          onOpenChange={setShowAddDialog}
        />
        
        {/* Dialogue de modification */}
        <TenantHistoryDialog
          open={showEditDialog}
          onOpenChange={setShowEditDialog}
          historyId={selectedEntryId}
        />

        {/* Dialogue de réassignation - toujours présent mais contrôlé par open */}
        <ReassignDialog
          open={showReassignDialog && !!selectedEntryId}
          onOpenChange={setShowReassignDialog}
          historyId={selectedEntryId || 0}
          tenantName={selectedTenantName || ''}
          onSuccess={() => {
            // Rafraîchir les données et fermer le dialogue
            queryClient.invalidateQueries({ queryKey: ['tenantHistory'] });
            queryClient.invalidateQueries({ queryKey: ['tenantHistoryStats'] });
            
            toast({
              title: 'Réassignation réussie',
              description: 'L\'entrée d\'historique a été réassignée avec succès',
            });
            
            // Réinitialiser les états
            setShowReassignDialog(false);
          }}
        />
      </div>
    </MainLayout>
  );
};

export default TenantHistoryPage;