import { drizzle } from 'drizzle-orm/node-postgres';
import { migrate } from 'drizzle-orm/node-postgres/migrator';
import { Pool } from 'pg';
import * as schema from './shared/schema';
import { readFileSync, readdirSync } from 'fs';
import { join } from 'path';
import { sql } from 'drizzle-orm';

// Configuration de la base de donn√©es
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Initialisation du client Drizzle
const db = drizzle(pool, { schema });

/**
 * Execute les migrations Drizzle et les migrations SQL personnalis√©es
 * Les migrations sont ex√©cut√©es dans l'ordre suivant:
 * 1. Migrations Drizzle bas√©es sur le sch√©ma
 * 2. Migrations SQL personnalis√©es bas√©es sur le pr√©fixe de la date
 */
async function runMigration() {
  try {
    console.log('üîÑ D√©marrage de la migration de base de donn√©es...');
    
    // 1. Appliquer les migrations Drizzle
    console.log('üìä Application des migrations Drizzle...');
    await migrate(db, { migrationsFolder: './migrations' });
    console.log('‚úÖ Migrations Drizzle appliqu√©es avec succ√®s');
    
    // 2. Trouver et ex√©cuter les migrations SQL personnalis√©es (prefix√©es par une date)
    const migrationFiles = readdirSync('./migrations')
      .filter(file => file.match(/^\d{8,}_.*\.sql$/)) // Format: YYYYMMDD_name.sql
      .sort();
    
    if (migrationFiles.length > 0) {
      console.log(`üîç Trouv√© ${migrationFiles.length} migrations SQL personnalis√©es`);
      
      for (const file of migrationFiles) {
        const migrationPath = join(process.cwd(), 'migrations', file);
        console.log(`‚öôÔ∏è Ex√©cution de la migration: ${file}`);
        
        const migrationSql = readFileSync(migrationPath, 'utf8');
        await db.execute(sql.raw(migrationSql));
        
        console.log(`‚úÖ Migration ${file} appliqu√©e avec succ√®s`);
      }
    } else {
      console.log('‚ÑπÔ∏è Aucune migration SQL personnalis√©e trouv√©e');
    }
    
    console.log('üéâ Migration termin√©e avec succ√®s');
    
    // Fermer la connexion
    await pool.end();
  } catch (error) {
    console.error('‚ùå √âchec de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration si ce script est appel√© directement
if (require.main === module) {
  runMigration();
}

// Exporter la fonction pour permettre son utilisation depuis d'autres scripts
export { runMigration };