import { drizzle } from 'drizzle-orm/node-postgres';
import { migrate } from 'drizzle-orm/node-postgres/migrator';
import { Pool } from 'pg';
import * as schema from './shared/schema';
import { readFileSync, readdirSync } from 'fs';
import { join } from 'path';
import { sql } from 'drizzle-orm';

// Import des migrations personnalis√©es
import { addUserAiQuotaFields } from './migrations/add-user-ai-quotas';

// Configuration de la base de donn√©es
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Initialisation du client Drizzle
const db = drizzle(pool, { schema });

/**
 * Execute les migrations Drizzle et les migrations SQL personnalis√©es
 * Les migrations sont ex√©cut√©es dans l'ordre suivant:
 * 1. Migrations Drizzle bas√©es sur le sch√©ma
 * 2. Migrations SQL personnalis√©es bas√©es sur le pr√©fixe de la date
 * 3. Migrations TypeScript personnalis√©es
 */
async function runMigration() {
  try {
    console.log('üîÑ D√©marrage de la migration de base de donn√©es...');
    
    // 1. Appliquer les migrations Drizzle
    console.log('üìä Application des migrations Drizzle...');
    await migrate(db, { migrationsFolder: './migrations' });
    console.log('‚úÖ Migrations Drizzle appliqu√©es avec succ√®s');
    
    // 2. Trouver et ex√©cuter les migrations SQL personnalis√©es (prefix√©es par une date)
    const migrationFiles = readdirSync('./migrations')
      .filter(file => file.match(/^\d{8,}_.*\.sql$/)) // Format: YYYYMMDD_name.sql
      .sort();
    
    if (migrationFiles.length > 0) {
      console.log(`üîç Trouv√© ${migrationFiles.length} migrations SQL personnalis√©es`);
      
      for (const file of migrationFiles) {
        const migrationPath = join(process.cwd(), 'migrations', file);
        console.log(`‚öôÔ∏è Ex√©cution de la migration: ${file}`);
        
        const migrationSql = readFileSync(migrationPath, 'utf8');
        await db.execute(sql.raw(migrationSql));
        
        console.log(`‚úÖ Migration ${file} appliqu√©e avec succ√®s`);
      }
    } else {
      console.log('‚ÑπÔ∏è Aucune migration SQL personnalis√©e trouv√©e');
    }
    
    // 3. Ex√©cuter les migrations TypeScript personnalis√©es
    console.log('üìä Application des migrations TypeScript personnalis√©es...');
    
    // Migration pour les quotas d'IA
    console.log('‚öôÔ∏è Ex√©cution de la migration pour les quotas d\'IA');
    const aiQuotaResult = await addUserAiQuotaFields();
    if (aiQuotaResult) {
      console.log('‚úÖ Migration des quotas d\'IA appliqu√©e avec succ√®s');
    } else {
      console.warn('‚ö†Ô∏è La migration des quotas d\'IA n\'a pas √©t√© appliqu√©e correctement');
    }
    
    // Migration pour mettre √† jour le champ preferred_ai_model
    console.log('‚úÖ Migration: Mise √† jour des mod√®les d\'IA disponibles');
    
    // Mettre √† jour tous les utilisateurs qui utilisent des mod√®les d√©sormais non support√©s
    await db.execute(sql`
      UPDATE users
      SET preferred_ai_model = 'openai-gpt-3.5'
      WHERE preferred_ai_model NOT IN ('openai-gpt-3.5', 'openai-gpt-4o')
    `);
    console.log('  ‚úÖ Mod√®les IA des utilisateurs mis √† jour vers openai-gpt-3.5 pour les mod√®les non support√©s');
    
    // Supprimer la contrainte existante si elle existe
    try {
      await db.execute(sql`
        ALTER TABLE users
        DROP CONSTRAINT IF EXISTS chk_preferred_ai_model
      `);
      console.log('  ‚úÖ Ancienne contrainte de preferred_ai_model supprim√©e (si elle existait)');
    } catch (error) {
      console.log('  ‚ÑπÔ∏è Impossible de supprimer la contrainte (peut ne pas exister)');
    }
    
    // Ajouter la nouvelle contrainte pour limiter les valeurs possibles √† seulement openai-gpt-3.5 et openai-gpt-4o
    try {
      await db.execute(sql`
        ALTER TABLE users
        ADD CONSTRAINT chk_preferred_ai_model 
        CHECK (preferred_ai_model IN ('openai-gpt-3.5', 'openai-gpt-4o'))
      `);
      console.log('  ‚úÖ Nouvelle contrainte ajout√©e pour preferred_ai_model');
    } catch (error) {
      console.error('  ‚ùå Erreur lors de l\'ajout de la nouvelle contrainte:', error);
    }
    
    console.log('üéâ Migration termin√©e avec succ√®s');
    
    // Fermer la connexion
    await pool.end();
  } catch (error) {
    console.error('‚ùå √âchec de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration si ce script est appel√© directement
if (require.main === module) {
  runMigration();
}

// Exporter la fonction pour permettre son utilisation depuis d'autres scripts
export { runMigration };

/**
 * Migration pour mettre √† jour le champ preferred_ai_model
 * Cette migration s'assure que tous les utilisateurs ont une valeur valide pour preferred_ai_model
 * apr√®s avoir restreint les mod√®les disponibles √† seulement openai-gpt-3.5 et openai-gpt-4o
 */
export async function updateAiModels() {
  try {
    console.log('‚úÖ Migration: Mise √† jour des mod√®les d\'IA disponibles');
    
    // Mettre √† jour tous les utilisateurs qui utilisent des mod√®les d√©sormais non support√©s
    await db.execute(sql`
      UPDATE users
      SET preferred_ai_model = 'openai-gpt-3.5'
      WHERE preferred_ai_model NOT IN ('openai-gpt-3.5', 'openai-gpt-4o')
    `);
    console.log('  ‚úÖ Mod√®les IA des utilisateurs mis √† jour vers openai-gpt-3.5 pour les mod√®les non support√©s');
    
    // Supprimer la contrainte existante si elle existe
    try {
      await db.execute(sql`
        ALTER TABLE users
        DROP CONSTRAINT IF EXISTS chk_preferred_ai_model
      `);
      console.log('  ‚úÖ Ancienne contrainte de preferred_ai_model supprim√©e (si elle existait)');
    } catch (error) {
      console.log('  ‚ÑπÔ∏è Impossible de supprimer la contrainte (peut ne pas exister)');
    }
    
    // Ajouter la nouvelle contrainte pour limiter les valeurs possibles √† seulement openai-gpt-3.5 et openai-gpt-4o
    try {
      await db.execute(sql`
        ALTER TABLE users
        ADD CONSTRAINT chk_preferred_ai_model 
        CHECK (preferred_ai_model IN ('openai-gpt-3.5', 'openai-gpt-4o'))
      `);
      console.log('  ‚úÖ Nouvelle contrainte ajout√©e pour preferred_ai_model');
    } catch (error) {
      console.error('  ‚ùå Erreur lors de l\'ajout de la nouvelle contrainte:', error);
    }
    
    console.log('‚úÖ Migration termin√©e avec succ√®s');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    return false;
  }
}