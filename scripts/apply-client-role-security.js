/**
 * Script pour appliquer la nouvelle configuration de s√©curit√© √† base unique de r√¥le 'clients'
 * √† une base de donn√©es existante
 */

import { Client } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// Obtenir le r√©pertoire actuel avec ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement
dotenv.config();

// R√©cup√©rer la connexion √† la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:123456789@localhost:5432/property_manager';

console.log('üîí Application de la nouvelle configuration de s√©curit√© RLS...');
console.log(`üîå Connexion: ${DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

/**
 * Ex√©cuter un script SQL sur la base de donn√©es
 */
async function executeSqlScript(scriptPath) {
  const client = new Client({
    connectionString: DATABASE_URL
  });

  try {
    console.log(`üìú Ex√©cution du script SQL: ${scriptPath}`);
    await client.connect();
    const sqlScript = fs.readFileSync(scriptPath, 'utf8');
    await client.query(sqlScript);
    console.log(`‚úÖ Script SQL ex√©cut√© avec succ√®s: ${scriptPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution du script SQL: ${scriptPath}`);
    console.error(error.message);
    return false;
  } finally {
    await client.end();
  }
}

/**
 * V√©rifier l'√©tat actuel des r√¥les dans la base de donn√©es
 */
async function checkDatabaseRoles() {
  const client = new Client({
    connectionString: DATABASE_URL
  });

  try {
    await client.connect();
    
    // Lister les r√¥les existants
    const rolesResult = await client.query(`
      SELECT rolname FROM pg_roles 
      WHERE rolname NOT LIKE 'pg_%' 
      ORDER BY rolname
    `);
    
    console.log('üìä R√¥les existants dans la base de donn√©es:');
    rolesResult.rows.forEach(role => {
      console.log(`- ${role.rolname}`);
    });
    
    // V√©rifier les politiques RLS
    const policiesResult = await client.query(`
      SELECT tablename, policyname FROM pg_policies
      ORDER BY tablename, policyname
    `);
    
    console.log('\nüìä Politiques RLS existantes:');
    policiesResult.rows.forEach(policy => {
      console.log(`- Table: ${policy.tablename}, Politique: ${policy.policyname}`);
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Impossible de v√©rifier les r√¥les:');
    console.error(error.message);
    return false;
  } finally {
    await client.end();
  }
}

/**
 * Programme principal
 */
async function main() {
  console.log('üöÄ D√©marrage de la mise √† jour de la s√©curit√©...');

  // 1. V√©rifier l'√©tat actuel
  await checkDatabaseRoles();

  // 2. Appliquer le script de configuration RLS
  const rlsScriptPath = path.join(__dirname, 'setup-postgres-rls.sql');
  const rlsSuccess = await executeSqlScript(rlsScriptPath);
  
  if (!rlsSuccess) {
    console.error('‚ùå La configuration RLS a √©chou√©.');
    process.exit(1);
  }

  // 3. V√©rifier l'√©tat apr√®s mise √† jour
  console.log('\nüìä √âtat apr√®s la mise √† jour:');
  await checkDatabaseRoles();

  console.log('\n‚úÖ Configuration de la s√©curit√© termin√©e!');
  console.log('üìù Assurez-vous de modifier √©galement les param√®tres d\'authentification dans le code de l\'application.');
}

// Ex√©cuter le programme principal
main().catch(error => {
  console.error('‚ùå Une erreur est survenue lors de la configuration:');
  console.error(error);
  process.exit(1); 
}); 