/**
 * Script pour supprimer les anciennes tables de stockage
 */

import pg from 'pg';
import fs from 'fs/promises';
import dotenv from 'dotenv';
import path from 'path';

// Charger les variables d'environnement
dotenv.config();

// R√©cup√©rer la connexion √† la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:123456789@localhost:5432/property_manager';

console.log('üöÄ Nettoyage des anciennes tables de stockage');
console.log(`üîå Connexion: ${DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

// Client PostgreSQL pour les op√©rations
const client = new pg.Client({
  connectionString: DATABASE_URL
});

/**
 * Fonction principale d'ex√©cution
 */
async function main() {
  try {
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // 1. Lister les tables de stockage existantes avant nettoyage
    const { rows: beforeTables } = await client.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_type = 'BASE TABLE'
      AND table_name LIKE 'storage_%'
      ORDER BY table_name
    `);

    console.log('\nüìä Tables de stockage avant nettoyage:');
    console.table(beforeTables);

    // 2. Lire le fichier SQL
    const scriptPath = path.join(process.cwd(), 'scripts', 'cleanup-storage-tables.sql');
    console.log(`üìÑ Lecture du script SQL: ${scriptPath}`);
    const sqlScript = await fs.readFile(scriptPath, 'utf8');

    // 3. Ex√©cuter le script SQL
    console.log('üîÑ Suppression des anciennes tables...');
    await client.query(sqlScript);
    console.log('‚úÖ Anciennes tables supprim√©es');

    // 4. Lister les tables de stockage restantes apr√®s nettoyage
    const { rows: afterTables } = await client.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_type = 'BASE TABLE'
      AND table_name LIKE 'storage_%'
      ORDER BY table_name
    `);

    console.log('\nüìä Tables de stockage apr√®s nettoyage:');
    console.table(afterTables);

    // 5. V√©rifier les nouvelles tables conserv√©es
    const { rows: allStorage } = await client.query(`
      SELECT 
        table_schema, 
        table_name,
        table_type
      FROM information_schema.tables
      WHERE table_name LIKE 'storage_%'
      ORDER BY table_schema, table_name
    `);

    console.log('\nüìä Toutes les tables/vues de stockage dans la base de donn√©es:');
    console.table(allStorage);

    console.log('\nüéâ Nettoyage des tables de stockage termin√© avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await client.end();
  }
}

// Ex√©cuter la fonction principale
main().catch(console.error); 