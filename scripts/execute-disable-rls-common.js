/**
 * Version simplifi√©e du script pour d√©sactiver RLS
 * Utilise uniquement les modules de base
 */

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// R√©cup√©rer la connexion √† la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:123456789@localhost:5432/property_manager';

console.log('üîê D√©sactivation de Row-Level Security...');
console.log(`üîå Connexion: ${DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

// Client PostgreSQL
const pool = new Pool({
  connectionString: DATABASE_URL
});

// Script SQL pour d√©sactiver RLS
const disableRlsScript = `
-- Activation du mode super-utilisateur pour supprimer les politiques et d√©sactiver RLS
SET session_replication_role = 'replica';

-- 1. D√©sactiver RLS sur toutes les tables publiques
DO $$
DECLARE
    r RECORD;
BEGIN
    RAISE NOTICE 'D√©sactivation de RLS sur toutes les tables du sch√©ma public...';
    
    FOR r IN 
        SELECT tablename 
        FROM pg_tables 
        WHERE schemaname = 'public'
    LOOP
        EXECUTE format('ALTER TABLE public.%I DISABLE ROW LEVEL SECURITY', r.tablename);
        RAISE NOTICE 'RLS d√©sactiv√© sur public.%', r.tablename;
    END LOOP;
END
$$;

-- 2. Supprimer toutes les politiques RLS existantes
DO $$
DECLARE
    r RECORD;
BEGIN
    RAISE NOTICE 'Suppression de toutes les politiques RLS...';
    
    FOR r IN 
        SELECT schemaname, tablename, policyname
        FROM pg_policies
        WHERE schemaname = 'public'
    LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON %I.%I', 
                       r.policyname, r.schemaname, r.tablename);
        RAISE NOTICE 'Politique % supprim√©e sur %.%', 
                     r.policyname, r.schemaname, r.tablename;
    END LOOP;
END
$$;

-- 3. Supprimer les fonctions RLS
DROP FUNCTION IF EXISTS public.setup_user_environment(integer);
DROP FUNCTION IF EXISTS public.set_current_user_id();
DROP FUNCTION IF EXISTS public.get_current_user_id();
DROP FUNCTION IF EXISTS public.user_has_access_to_record(integer);

-- Restaurer le mode normal
SET session_replication_role = 'origin';
`;

// Fonction principale
async function main() {
  let client;
  try {
    client = await pool.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    
    console.log('üìú Ex√©cution du script SQL pour d√©sactiver RLS...');
    
    // Ex√©cuter le script SQL
    await client.query(disableRlsScript);
    
    console.log('‚úÖ Row-Level Security d√©sactiv√© avec succ√®s!');
    console.log('üîí La s√©curit√© est maintenant assur√©e par la s√©paration des sch√©mas.');

  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©sactivation de RLS:', error);
  } finally {
    // Fermer la connexion
    if (client) client.release();
    await pool.end();
  }
}

// Ex√©cuter le script
main(); 