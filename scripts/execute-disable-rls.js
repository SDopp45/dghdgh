/**
 * Script pour ex√©cuter la d√©sactivation du Row-Level Security apr√®s migration vers architecture multi-sch√©ma
 */

import pg from 'pg';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// R√©cup√©rer la connexion √† la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:123456789@localhost:5432/property_manager';

console.log('üîê D√©sactivation de Row-Level Security...');
console.log(`üîå Connexion: ${DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

// Client PostgreSQL
const client = new pg.Client({
  connectionString: DATABASE_URL
});

// Fonction principale
async function main() {
  try {
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Charger le script SQL
    const sqlPath = path.join(process.cwd(), 'scripts', 'disable-rls.sql');
    const sqlScript = await fs.readFile(sqlPath, 'utf8');
    
    console.log('üìú Ex√©cution du script SQL pour d√©sactiver RLS...');
    
    // Ex√©cuter le script SQL
    await client.query(sqlScript);
    
    console.log('‚úÖ Row-Level Security d√©sactiv√© avec succ√®s!');
    console.log('üîí La s√©curit√© est maintenant assur√©e par la s√©paration des sch√©mas.');

  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©sactivation de RLS:', error);
    process.exit(1);
  } finally {
    // Fermer la connexion
    await client.end();
  }
}

// Ex√©cuter le script
main(); 