/**
 * Script de configuration compl√®te de la base de donn√©es
 * Ex√©cute les migrations, initialise les tables et configure la s√©curit√© RLS
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const { Client } = require('pg');
const dotenv = require('dotenv');

// Charger les variables d'environnement
dotenv.config();

// R√©cup√©rer la connexion √† la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:123456789@localhost:5432/property_manager';

console.log('üîß Configuration de la base de donn√©es...');
console.log(`üîå Connexion: ${DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

/**
 * Ex√©cuter une commande shell avec gestion d'erreur
 */
function runCommand(command, options = {}) {
  try {
    console.log(`Ex√©cution: ${command}`);
    execSync(command, { stdio: 'inherit', ...options });
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution de la commande: ${command}`);
    console.error(error.message);
    if (options.fatal !== false) {
      process.exit(1);
    }
    return false;
  }
}

/**
 * Ex√©cuter un script SQL sur la base de donn√©es
 */
async function executeSqlScript(scriptPath) {
  const client = new Client({
    connectionString: DATABASE_URL
  });

  try {
    console.log(`üìú Ex√©cution du script SQL: ${scriptPath}`);
    await client.connect();
    const sqlScript = fs.readFileSync(scriptPath, 'utf8');
    await client.query(sqlScript);
    console.log(`‚úÖ Script SQL ex√©cut√© avec succ√®s: ${scriptPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution du script SQL: ${scriptPath}`);
    console.error(error.message);
    return false;
  } finally {
    await client.end();
  }
}

/**
 * V√©rifier la connexion √† la base de donn√©es
 */
async function checkDatabaseConnection() {
  const client = new Client({
    connectionString: DATABASE_URL
  });

  try {
    await client.connect();
    const result = await client.query('SELECT NOW() as now');
    console.log(`‚úÖ Connexion √† la base de donn√©es r√©ussie! Heure du serveur: ${result.rows[0].now}`);
    return true;
  } catch (error) {
    console.error('‚ùå Impossible de se connecter √† la base de donn√©es:');
    console.error(error.message);
    return false;
  } finally {
    await client.end();
  }
}

/**
 * Programme principal
 */
async function main() {
  console.log('üöÄ D√©marrage de la configuration de la base de donn√©es...');

  // 1. V√©rifier la connexion √† la base de donn√©es
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    console.error('‚ùå La connexion √† la base de donn√©es a √©chou√©. Veuillez v√©rifier vos param√®tres.');
    process.exit(1);
  }

  // 2. G√©n√©rer les migrations si n√©cessaire
  console.log('üìä G√©n√©ration des migrations Drizzle...');
  runCommand('npx drizzle-kit generate', { fatal: false });

  // 3. Appliquer les migrations avec drizzle
  console.log('üîÑ Application des migrations...');
  runCommand('npx drizzle-kit push:pg');

  // 4. Configurer Row-Level Security (RLS)
  const rlsScriptPath = path.join(__dirname, 'setup-postgres-rls.sql');
  const rlsSuccess = await executeSqlScript(rlsScriptPath);
  
  if (!rlsSuccess) {
    console.warn('‚ö†Ô∏è La configuration RLS a √©chou√©. L\'application fonctionnera mais sans s√©curit√© au niveau des lignes.');
  }

  // 5. Cr√©er des donn√©es de test si en mode d√©veloppement
  if (process.env.NODE_ENV === 'development') {
    console.log('üß™ Cr√©ation des donn√©es de test...');
    const seedScriptPath = path.join(__dirname, 'seed-test-data.sql');
    
    if (fs.existsSync(seedScriptPath)) {
      await executeSqlScript(seedScriptPath);
    } else {
      console.log('‚ÑπÔ∏è Aucun script de donn√©es de test trouv√©.');
    }
  }

  console.log('‚úÖ Configuration de la base de donn√©es termin√©e!');
}

// Ex√©cuter le programme principal
main().catch(error => {
  console.error('‚ùå Une erreur est survenue lors de la configuration:');
  console.error(error);
  process.exit(1);
}); 