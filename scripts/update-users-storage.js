/**
 * Script pour mettre √† jour la table users et l'adapter √† la nouvelle architecture de stockage
 */

import pg from 'pg';
import fs from 'fs/promises';
import dotenv from 'dotenv';
import path from 'path';

// Charger les variables d'environnement
dotenv.config();

// R√©cup√©rer la connexion √† la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:123456789@localhost:5432/property_manager';

console.log('üöÄ Mise √† jour de la table users pour la nouvelle architecture de stockage');
console.log(`üîå Connexion: ${DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

// Client PostgreSQL pour les op√©rations
const client = new pg.Client({
  connectionString: DATABASE_URL
});

/**
 * Fonction principale d'ex√©cution
 */
async function main() {
  try {
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // 1. Examiner les colonnes actuelles li√©es au stockage dans la table users
    const { rows: storageColumns } = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_schema = 'public' AND table_name = 'users'
      AND column_name IN ('storage_used', 'storage_limit', 'storage_tier');
    `);

    console.log('\nüìä Colonnes de stockage actuelles dans la table users:');
    console.table(storageColumns);

    // 2. Ajouter une colonne pour r√©f√©rencer le plan de stockage
    console.log('üîÑ Ajout de la colonne storage_plan_id √† la table users...');
    await client.query(`
      ALTER TABLE public.users ADD COLUMN IF NOT EXISTS storage_plan_id INTEGER REFERENCES public.storage_plans(id);
    `);
    console.log('‚úÖ Colonne ajout√©e');

    // 3. Mettre √† jour le plan de stockage pour les utilisateurs existants
    console.log('üîÑ Attribution des plans de stockage aux utilisateurs existants...');
    const { rowCount } = await client.query(`
      UPDATE public.users SET storage_plan_id = 
        CASE 
          WHEN role = 'admin' THEN 3  -- Professionnel pour les admin
          ELSE 1                      -- Gratuit pour les autres
        END
      WHERE storage_plan_id IS NULL;
    `);
    console.log(`‚úÖ ${rowCount} utilisateurs mis √† jour`);

    // 4. Afficher les utilisateurs avec leurs plans de stockage
    const { rows: usersWithPlans } = await client.query(`
      SELECT u.id, u.username, u.role, u.storage_plan_id, p.name as plan_name, p.storage_limit
      FROM public.users u
      LEFT JOIN public.storage_plans p ON u.storage_plan_id = p.id
      ORDER BY u.id;
    `);

    console.log('\nüìä Utilisateurs avec leurs plans de stockage:');
    console.table(usersWithPlans);

    // 5. Migrer les donn√©es des anciennes colonnes vers la nouvelle structure (si applicable)
    if (storageColumns.length > 0) {
      console.log('üîÑ Migration des donn√©es d\'utilisation de stockage existantes...');
      const { rowCount: insertedCount } = await client.query(`
        INSERT INTO client_31.storage_usage (
          resource_type,
          resource_id,
          filename,
          file_path,
          file_type,
          size_bytes,
          created_at
        )
        SELECT 
          'user_storage',    -- Type g√©n√©rique pour la migration initiale
          id,                -- ID de l'utilisateur comme resource_id
          'migrated_data',   -- Nom de fichier g√©n√©rique pour la migration
          '',                -- Chemin de fichier vide pour la migration
          'application/octet-stream', -- Type MIME g√©n√©rique
          COALESCE(NULLIF(storage_used, ''), '0')::BIGINT, -- Conversion de storage_used en BIGINT
          NOW()              -- Date actuelle pour created_at
        FROM public.users
        WHERE storage_used IS NOT NULL AND storage_used != '0'
        AND id = 31; -- Seulement pour l'utilisateur test (ID 31)
      `);
      
      console.log(`‚úÖ ${insertedCount} enregistrements d'utilisation de stockage migr√©s`);
    } else {
      console.log('‚ÑπÔ∏è Aucune donn√©e de stockage √† migrer (colonnes non trouv√©es)');
    }

    // 6. V√©rifier les entr√©es dans la table storage_usage
    const { rows: storageUsage } = await client.query(`
      SELECT * FROM client_31.storage_usage
      ORDER BY id;
    `);

    console.log('\nüìä Donn√©es d\'utilisation de stockage migr√©es:');
    console.table(storageUsage);

    console.log('\nüéâ Mise √† jour de la table users termin√©e avec succ√®s');
    
    // Indiquer les prochaines √©tapes
    console.log('\n‚ö†Ô∏è PROCHAINES √âTAPES:');
    console.log('1. V√©rifier que toutes les donn√©es ont √©t√© correctement migr√©es');
    console.log('2. Adapter le code de l\'application pour utiliser la nouvelle structure');
    console.log('3. Une fois tout v√©rifi√©, supprimer les anciennes colonnes avec:');
    console.log('   ALTER TABLE public.users DROP COLUMN storage_used;');
    console.log('   ALTER TABLE public.users DROP COLUMN storage_limit;');
    console.log('   ALTER TABLE public.users DROP COLUMN storage_tier;');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await client.end();
  }
}

// Ex√©cuter la fonction principale
main().catch(console.error); 